{"project": "probnum", "project_url": "https://probnum.readthedocs.io/", "show_commit_url": "http://github.com/probabilistic-numerics/probnum/commit/", "hash_length": 8, "revision_to_hash": {"326": "1e88aa702d15c75e59e01780ce8fe36e4f414813", "343": "4ef662ce7efd50c5bba5adcdec3a2e8fc0e7498e", "349": "ee24f48f9ff07e9ec0e194966101c3c690f7f44d", "350": "bba5a7c2740b3370f8ae1c9e30d8429af6343146", "351": "de312cd18dea958df359e44c3650f72b68ec26c5", "352": "3ecea1cceaac6085fae15e2fd76b6f0f2a498692", "353": "b38f9469dc1c1d1b8059686e421784967c8069a2", "354": "fc8a90da7d70ecc29a430e96ec99bb407f482196", "363": "7d6f1ef987eb63235f29c7adf73b6c6c7d03d23f", "364": "762ea4db0e9c48851fd796317653c4718ca62538", "365": "03f3287d75cdbedfa0cd86024a6eb6b0aaf7f6f2", "366": "202741fdcbe23d202a0d6ba26367bdcf2f553a74", "367": "5cea49433eb4d8518c001eedacf1d511bf0a6d56", "488": "f3403ddb418225f872c7f68d8fa101b4ddeee436", "493": "0765d66cbaefa863a7c6d04f5cf9fe9e4af16d69", "505": "a8b9f55110e96ac6f6b43c0917e371e4128cd75a", "506": "5cadbe43f6446028b4d96520bd6c75702650c4b9", "507": "bd11c04c66622ef58fd196f21079ddec1d60456f", "508": "a8879ffba045bec76808135fead815e8f18d9516", "509": "19e6f9949ebc03174ab5f74dab94c96c64417317", "510": "a6c8c828ccadaa367451b2bf350dcf2be8d580c3", "511": "2fd4b9062884833df0d3360785c5a82ee1c7e9a0", "512": "7135e32367e384a25edc8363de8207f801fff87e", "513": "7d3d3c6563b67f199576e041893c496e0130f9d5", "514": "d4fb68c8d7d4cc86be515ec30d5e8ed901048609", "515": "0260370781a117d7053e8971d908cb385bd396e6", "516": "8529e35ec07bfaec6f8ffb94c37732f41570684d", "517": "54efaf3b49568edee4affa95663e8c0eb14cbc7f", "518": "346cd216f8015964fc57eec23ce111859f8c13fc", "519": "a6e55f9d7411e77f0c7bf4623a9a2c2e80391755", "521": "92224bfe3a1927a853cf1fc24f3e1f986a4164db", "524": "9f55a206eec6ba4cbdca6c5216282992a8859dc4", "525": "7c45c6ebb2224b2c12ef190c661d2aeefb56af05", "526": "438021a2dda54af9abad7d48cf0daba33e5f566d", "527": "22f54fab6cb9638a000fa1b8733176271618bb99", "528": "762b2f7fcb6411e011b240d4ae1ce2a751741c5a", "529": "92b791168d0f1bc3c484a1ac48ce091991bc23a0", "530": "50c57740667c4245b2faa02698837375458be061", "531": "9c53fec41dcc1145d6e22f7f0b917d247455f112", "532": "95e4a72752369ca913160c5d01b85e4f0ffaac30", "533": "e07d65da46892a879f2991834a63e3fea2b28171", "534": "d7abbc3ddba992d0a6d27802a9a5fe9940e2348b", "535": "bef069ccc95626f57ec0176ac592d53c9a9ec879", "536": "7e5f297dbad4ee650ef8a60a5bc62f4a30a367bf", "537": "5d329650e9d57074536a964512cbd8aedc133bd6", "538": "00809c2df3003ba89e220de8963f02f9c8b0f222", "539": "bf1f36532abe3698b2f5b1111552f36ed431e4aa", "540": "074ee1ff5350f6b03a13ac3679fc91cf37b450a1", "541": "0c19b25586a2e839ced4803843a4ca688ee23e7f", "542": "c52a88a966e88e87c34ed1115dff09e3a02d6a97", "543": "aeda6fb41094784c3b17a566e76986b7e9186048", "544": "bc4e19f951b538b71e6ce9bf02c5a07031269612", "545": "4d7094c26838d530468dc554645060099ae393e4", "546": "1d6839c416091d49d2e2595ac9cda615f6ce0ec9", "547": "f8c72dfeff47f653dfd2ea90960e206d28cf6c80", "548": "20fda23d8135da66db138f9158f8f0d45de9d538", "549": "f0d1671fcbf4b95deb23f4c47d551349f0d8c32f", "550": "fcfd6255dde4197e0c781480628654f66212ff46", "551": "ca86f996cee7ca182c880fe9d30efc94cb6e1da7", "552": "055b25575e23682ef8906975f8959d9a62a16385", "553": "284671e2e9ee30c26dbeb0dbb874f435ff4790c4", "554": "692322f6a9c5918e606fe6090290f80e45cea4ea", "555": "0b8097c14cbe864d9d6ba2117e8b2ce887967a26", "556": "6755b15b982653559bcd5061c14c8d9333baf7ec", "557": "bfae58979599c99350d34a34bc5d411b9b7d8e06", "558": "4d14b394cdb778aadd55c93e1e531748efe27425", "559": "70fe02f0d3f2a343674513fec9aeb5941d970d1a", "560": "dae2ff9ac9970a2701c7d69353a221212be9f8b2", "561": "6061740751443440c1da1761713538cf56358af6", "562": "7e030d528cbe136c3344f738a59516f349c3e597", "563": "1e8c27c5a89e6dec6925afff431d181495573a70", "564": "227305cc19c5c7b24321da62a3de7aec03e87ef8", "565": "d2591e69d086fbb1200ded7f6c789da817835d0a", "566": "04384d6683516eee1faf2d2692bf09fdbda3465d", "567": "7843bb0673457c3689d1bc982d98cfd353d07d4e", "568": "16b8388bc5f69708f0885c6d9cf70c039dfc0089", "569": "8cabd08bb638e4370fdc829cc3c7e6887abde7bd", "570": "350a04e2e1f8327b75b6d6cdc5888c25e87b4403", "571": "c021be89c7f645ae3bf48c6b339773f890f287fe", "572": "d0642f2451eecbb58684d2e349dcf6e6d819c92b", "573": "b8e5bdc39d4e8ca5777b0f54ebf18f0551b3bf33", "574": "5d161b62a79c5c0021b9e09425e2a23c16e1c26b", "575": "b3fd24e148b320855986c24660f00df0745438bb", "576": "a786e914c0c4af8f8f2d6c743246dbb1a78d86a4", "577": "ffeedb0ecf1817ae02ed86426b22271b9935663c", "578": "2efcde76e88fd93296f3d74f28515ffe6f8e7cdb", "579": "e1dc7c75a9008d18406c5993ec0a2da645d9d398", "580": "ffaabb465f757af8e751d332113d274502a04697", "581": "ae33e42e8b07aa11e5898e4ec5cbb9ec9041a84b", "582": "0f8ce8b5dc3998afa57551e262232591ba85f317", "583": "e80e16092c0c233e3e41c4ee07f0c09c5de17c49", "584": "1e86bb18ea10dc37a48c8d98c6d2a4db1a7951a7", "585": "b2243577e6422f53444f5ba1f7cc359b3a576e8d", "586": "da6354ee708a26a23d014e6f4d6ccdca9c92e0e8", "587": "0579435eda35df0ee3bcf1bcaa759d4bad8051c5", "588": "47ebd5651ee89756dba1ef65d1b6693556361a3e", "589": "8dc95592e1e59a824357723f75bafb57d34b93cf", "590": "8caff9f5113808e4d93d7200d4a058939084cdbc", "591": "13eba8796d2bda9b579727fb8774d917c4c34e9c", "592": "726efbd1aebd918f57fb308a1badddb0bc4f7343", "593": "3eeddc47ea05e6f0d9cb2931e7ef5d54672ead30", "594": "1d21c02608be24b5543c8009e6fa72342406b87b", "595": "c5996a93575d7d43524a80033c4c746cedcd0379", "596": "1c65522b7355d66128a89905870e04b6b6c574e3", "597": "a2fa5a50bfdb9c1397d30e348234fb8087f85a85", "598": "f033d04454dd17f35e9f9d616d80c99644d210c5", "599": "7d7dc3d935d558d55a9b654e2637e284a8f1ff41", "600": "73b00c4630ecb4e3a510d9d029d93ea3085ddf2e", "601": "606257f7624f9b376fc37921ad0729eba12f8d9b", "602": "d6328acccc57cd586e3ca77581bc4fe357a1e727", "603": "eb7cc9a70703e9ecf94de2d9ae568574e108be69", "604": "7990789f4a4a1b6643535241a78e64488b1a39e1", "605": "1ddf55a62e2f77e1d709d42e0b158f715034261d", "606": "f1fb38cc43893f205f00edae603d695289716059", "607": "075f4eb414b665c0f3c1cd3c367977656d787331", "608": "af57fad962c1229041a5c337d13bc1f776350cf4", "609": "083fffd10c7c95970462ddf8298cc25a9506f224", "610": "936b52cd80c73e4b3c31545316d3a2a5caffacba", "611": "30d0eb72303c4cbc27c643ac175fd23048aabf18", "612": "cd77f14d381b9d814635c608bc7f8f84a640089f", "613": "1ac716af76299a46f37ca49aa62f920705d5920b", "614": "ff32ab01126789f0a6484b96a58e32349133ae93", "615": "8032139cc4e67476fe493c2a299b1c7cb862cb4c", "616": "70c636a20da8518ed53b9e66ce8a6c523697b330", "617": "0027befd803376dfaf54c6afd732728825635595", "618": "b1d5790aece61d4856b61819f22c4b7fc255430d", "619": "b5c9fe0530c4d4ce4aac6c25d688348743ac5fe3", "620": "0d588dc15fbe3f46af0d47786a20af92f0b612c0", "621": "34cacae2691fc8030dab6562024f0ccd5d7da712", "622": "b137159588a2470451f16c75eb781749f3a5872e", "623": "bf4aa533296a27c93dbe68c4525dae4687836485", "624": "a3ef794d24a8e0dcd467b4a3033780732f640b41", "625": "41d45117a7eeee8722c85eb9425c8b07a63ef38c", "626": "ee2ff1ff658d6f3c1302c3629831aa993faaa912", "627": "0eb222a4f67db752ec6d210ecd08976ca4e8c36d", "628": "556858d89122d445ef53ffa20918fea5334c0ff9", "629": "0f3b72e979ca823963c153f5310dcbe1e8c233f5", "630": "0cee80ed39c98d57a9302a9d3c44ff2c36b0d8f7", "631": "37a2efae4e6398a636834991831b888cac5c4624", "632": "0614751def7359d2545d8bd5b86f489937a3ea1d", "633": "49a426d3792292d7e55f5ef75b1f97062170b545", "634": "22d2de2810303fb4ac4148f6cfe7fafd89185009", "635": "2f9f70e5167d390859211f373e8f152cd4cdb442", "636": "6dff4f701ff9504b88bf7f534ebe3bc1a4b814c4", "637": "980e8d53c2b6c93c3ccc59993081237da94c29bf", "638": "a5865560a19028a7ee6241b25683b5a224ee7dbd", "639": "1f9d7d8a401d865cec6ae0410f5ba95663bdb55c", "640": "8771c68e4ee30667abcb02d7b0f0e880cabb3c0c", "641": "3fd19d7da0e8864e822378d027d5b89ae7ba99ea", "642": "bf59c21f423da76c6a2d6b30b565ed470975e605", "643": "d8f4798d254ba51b13d021343dd79417d0e67420", "644": "bf863e7d4495f7a728f6aa4320dc1b1031282396", "645": "33b4621da5dff87081855a65bfde386b6f5bb659", "646": "0c37b575ab012336bb2a4572648872ab06737d60", "647": "2f9c86f4bc2007aa02597ca24b267f127f37e3ff", "648": "170161386ef0c0c7dcadfa6c1c48a0ba91c840b5", "649": "158df0dc2147ab8c5d71c111c7f4661a9994e43a", "650": "b9f18aed3b22fadad648022f1bc50390e0f10267", "651": "96e7575e757afda73b3e584d67a94772b8205220", "652": "3204b2a1692fd16d84c22e5b9d5e1d3595fd71fa", "653": "74bd9017d1d729ec55535b752287b7158c720b0b", "654": "f606ff39ade46950aa40c42c029966108d68d059", "655": "924aac4301c561b08486faca4da62c4206c36f13", "656": "e74e44e51884a8e32619a00a499f2690db1153d5", "657": "b988e6dc5a83e9b3e42bbac85729e0aca047341b", "658": "460b0428b29d92e918726dbc866a9164dca581bc", "659": "c78070797e35ce7424765f3090fbbec8898b544d", "660": "9a362d6d7ef6539d532874e6ed294d3b374ee095", "661": "499984234e602901eea0c4f4c8b4bbf07324b15a", "662": "9019a322b1d198b2f5bca27492174bd9f9dc8dea", "663": "a05f8dd1875c1deef7be8f9547143ad9f021543b", "664": "2ddc3bc541b8caf7dffe30da045454611abe689f", "665": "6713a2400e72ad2c6cc835822ac7d89c2fcf6673", "666": "5eff86e4f1170e799df65f4706acb68bbbcbb24f", "667": "acb56ec6c9e4cd9a8f7275e2fa8094b94677433b", "668": "21212cdd023dee00d49b3e1ef3a1bdf58ed34095", "669": "7d5ef3d16750f5e7289cb123f9ff8632ffafa4f5", "670": "82cb7a96600a62fdaaca91fbcb2cede22d537cb2", "671": "2063aaedb6ecbf3452226e8528c7b140bfea5e51", "672": "433d04a9910c9bb4c6c1b1178dc6186859f6a4f5", "673": "55e35e395af6d6a87d5b02b7c027e3b04f68bafb", "674": "e66918d1e834952e12034991026fe8a60ec8465c", "675": "c830000186ba35aab3d06005f1c13816b2ecf5e4", "676": "1f633c3c664b806918365545126ee8d30d92d559", "677": "bdf419c7ced5a1445322132b7ade0b41f4e19648", "678": "cbc113c5da9e926a2a3ae77019baf66cf3b25bfd", "679": "84cc9af62e61d5764696b5f4346957a2df2ac345", "680": "9f528929affefac76720bafdc9b9f354ebfe347f", "681": "624b05ed33980e3f4d6c60d47700609e64b73412", "682": "c65f535373de6d24feca820f64134f70b2e986e8", "683": "d1854000164bf2f36487357e08a29fc9c613a4f8", "684": "2762eb9fbae8fe75313a09d3c586d55f6ffe8ace", "685": "21c97c7d6c97f962e89a304cd0e1733764ecf6e5", "686": "a5f7ceea9a0dde28c8b649c7f76d1629109cabfc", "687": "8834b33afe8edc065ae2b4d57f268c08887bf96d", "688": "193ad6abff02f5670120c45e7e6af0067996b61e", "689": "46b4672eb0c80521b3dc08677a95b6da32f5544e", "690": "69596de7ca2a28417cc29fb1a333e2e4b8283f67", "691": "0b9aa1fb369e94f7539e096f12d3087169d3976a", "692": "c7b4655cbbb1842da2d50087cba901d35e97345b", "693": "2502c79ebfdd73c853ccdabd3458d5b691d086ce", "694": "45dab4c63ce20add4e5c80346bd5bb9edd122e25", "695": "4b41e9e03695c38989950aad98eff1a82bf7a16c", "696": "b46e5a2d97e1e066ddc2c44b1dd24aeeb9e5c294", "697": "e14285937135108310c21027f16b765bb84816e1", "698": "a7b82364d1594971382fa5a9d4dd91ee022ec62b", "699": "e75199dcb102e758875ae2f0f309bdeaa5275ef7", "700": "eb412b6b572d04ca60e4e29e51ab54daa786a809", "701": "adad439dcd42be558ccb326f0f6bfce426f2eb6f", "702": "22311d8eec62e9f11f12bc65e91fdceb4ec02348", "703": "970f953550b03c9db2adb0965d2306848bfb8504", "704": "f0b94f00f8367c609f3fc9b269ba56a969d12c6a", "705": "e12dae6900436ed4a6c1ae56ea2306de79247aff", "706": "6e847a5ca0916bab97348f04657d22c303ae6131", "707": "e93210225a0a0088c73832c967ba4b057e820b86", "708": "f21a7422c192836b490ff288e39d976bfec100b4", "709": "4470023242b846d4a82eaa4e7e3b193f4c842d4a", "710": "7c282b3e756592ed31c37beaaab0d508feeea100", "711": "1ab81a75b527c27fc22ad04859e5a1d506ef5f33", "712": "a914008b6c09fac4d61f4d8826060ad463411941", "713": "0f7877bc4cfa7deab10d815519966cbe87b29dc3", "714": "1fd0b91eef8d555d71f5957b3116a8c989e86175", "715": "54762b70d4c6d0e5776ed17b862008fe69432f88", "716": "28a3ee3ad50f4b4e99430610002d10340349d965", "717": "618b1c0ee23c3b6fecb17571440e248fe6bd6258", "718": "bc2ee9fa2831dde6ae149f93ef293ca6728aff3c", "719": "2c52c50a10e49605c670ccffd0cb68debb26aae2", "720": "f16d92a280c30dc060a9eba25761478cf8989c01", "721": "a5ac27f1b0df09f1246d8302db1bb92799390914", "722": "f180e438ba8405c17b2759ff0f7bc8ebae51dfba", "723": "1fc231c4846dbf8dcb9fa65f789d907659167530", "724": "7959c3e4b0b1bf25d91b25316ee8e9b140d10ed3", "725": "39c61e81b0a843bcb348b67ebdc574e91b3d44e2", "726": "b706fafffe99afa63a34baf22a4c202daae4bd69", "727": "4bafa43577c74643637051549ddfa123824b0b0f", "728": "7c209c0d79b5427135a7ccb5e5dd846e731d5655", "729": "5c494124c8516a81df68129c2505998997f63c07", "730": "6fa0176b68ffbe94ad348b45de24e3ce9d2cba47", "731": "111b60b6758b4f592f6fb64a0a5f140ce15ce855", "732": "3678ce753883ee076b0c5e06961cbe82759fc984", "733": "a5e9b59300a76d1b7fd7cf74e40dfbd794639d1b", "734": "0aa302e7117f1f45bef277b6f1e03347f0d69043", "735": "5189a66a359167d1208524551cebb6b12d14156e", "736": "9c0c0cf3925fbeea86113369de02c1e04630a2e3", "737": "4c83e5f40b483eb546117b9624f3db01d203a64f", "738": "59b6852b72ec75d8c9d8666c8e7804e4f3f0646d", "739": "dfc403f38378bef5e681c904330fc0f7af142cb1", "740": "63b3051f1cc9bceb18d0a0434c96e4cee8cd5a94", "741": "877964846880049b453b4614cf8d3e3953be4082", "742": "bdadd4149d121382cfa6e4d8bb903472d6db924f", "743": "a6ac9337e844f964172820fe5f704948ef1278c0", "744": "5c1890bf984e3a1bfb35283d43933c573543162a", "745": "639c0baf2d33f305d4df7e4af30c93bf819ecd47", "746": "5ab0196c70eeb742a2757370bb84d4dd074aaef1", "747": "1cb9fe047dff3bcd680a19821a653c3e4e4f0085", "748": "6898026da397150af235bcc6918a757a9758ced7", "749": "a27def6900abed73a79894dc5725af9627f7df90", "750": "44b0fde59c071338243e8639d0fb3fc366fe1df1", "751": "b9557a53c656507ced2551e8b989effe1ef3a8cd", "752": "6b0d2ce50ed3c88150e633d5a4970216a371f1d7", "753": "381ab77f2d9fdc3f5bbea75d94e804e4ca1eb582", "754": "2108c21db1dc084fb6e75dde577dfbe517700556", "755": "92a5324ad6813edeb8796b617f621298245cba11", "756": "5b20e58a5e1d57244b675615456fb6283bb560ff", "757": "58e061a6b4f60ae914c555ee12a2931971af61da", "758": "cee217500068e15203e007d844c808ae427f2ac8", "759": "42d38f664ebde46c6918b1468c61ec5df77715ea", "760": "db906a70e27e1cd8a0801d281e5cf3d9dca625c8", "761": "4527cec45a5d5a513eb879517afad4510ff7b71c", "762": "b6960faccab6c77c38488524fed342e8eb9ca568", "763": "14042231077f88ea6c926e55b4b21251e01fe1aa", "764": "aa7deb3ac07226006bb3bdfb280a29b39636bb7f", "765": "59ff59cae9bc06d752ff1bdb98385fa139cd25df", "767": "11606dc254023d8e63762b1095e4d22da9a6fd65", "768": "146037c89efd980c8163990a1e0f28d99cde5dc7", "771": "fb526a996c562844d569a7470565a9e2b472d076", "776": "0b85017bf00de90f14d11494a9d013bd1abca03a", "779": "bebf52e40c243c4034c384e515540309e4056612", "780": "08308913744b9c38cc66dde077d28a8d5f815689", "782": "e8b1aa21151ac03cfe8baf0748eb3b1c502d34a6", "783": "d7f17b9cb4acff184eec24276993d952fc06878c", "784": "0fcdee40c38fb58ac45b1b24930e8fcf001e58ff", "785": "9d2643745d8c29670ddee3803c84d9bfc77c54e9", "786": "57e6132a66064827c271f23a43beeaf6398448a4", "787": "ddfdb8fd446cb92edef5b1b59af27b344ed05f4c", "788": "018be1e6d40d3f8567d4097008f9e337f4070797", "789": "d703d2af98d1685354f8032638aadf0a5a640a79", "790": "1384bf6f676d1ccbbb05ba8dbe0233f1d08d45af", "791": "2c3a5a7cfcf2d2458860743243558bc13dc063d0", "792": "19c93a1a8f32659939c305541eb2f63489d8d006", "793": "eb2644d122bf87d9b299a7eaed8bc3dfa0e9c8df", "794": "0aa752b335bc7f596263632071dabf3078cc8192", "795": "a232a0316816aa8c789db63fdd2963125b9bf833", "796": "151757b6cfcc7991426f9593fb2f4999f5a795fe", "797": "ab66e155d8411dc7dcf374fd0d29e148ebb79dd8", "798": "9fc33416e5e11abbfec0515c1e779db5034a26c9", "799": "13421ee71c83012cc5d7f683823b5d8ce365fd66", "800": "40c8e8b3b5bada72ae9bc8108e2440aecf3bff5f", "801": "080a3804f6af68282cc3b3afabc582d19ca1b255", "802": "832fb25a1fcd139aeafff928c15748ac9a925d12", "803": "868d56fac938c29c5645fa1f5944ca115d399482", "804": "4ee4a0d0b3f9547dbeee5a260641af5342e436ea", "805": "41233c8941df9990fc2e8b0e78ddab6176f65786", "806": "239b3374ba02dcd5a5b83fd74818a031661f412a", "807": "07e35996f52b4f362312c9be4359015786311ef3", "808": "8a0cc0dfe9f666ae85f37dc60b65b9f12c553f34", "809": "131700971f825eb04a2fa5fec827a7924d825c67", "810": "0717891617008d230e2e91facc03eab64fb241c8", "811": "792b6299bac247cf8b1b5056756f0f078855d83a", "812": "f6bc03a3bb70ff34c7e87dfa3b5cf972f7887228", "813": "207be9204e95fb17378da5a78616080e89a37a17", "814": "62a34a7d00a0455af0e6bec03a3d65c9c4631248", "815": "8672641fa864910e9efc03737c035e752d542b82", "816": "639ff378139091c14fd6b48dba7e354c6f8399bd", "817": "69a77aa90daf87418fd31556d42f514db8ba96e6", "818": "34623792d2a2c31e657c6121c8762e0e8790fe16", "819": "cf634c832e701fb4387879348037433ed92668ef", "820": "ded284e7c3b8fa111437b1b093b064ff8eb841d4", "821": "ac858a8ad14467c296068c21eba3cf9e20192ea4", "822": "3035c3132ae3f5795a2a6722d53cfa17da84cced", "823": "e1bd6b25ea4181786f3b29bea6f3a9d9ee47ccc2", "824": "4bcba5188256c4d6c15345f0eca86f489fb1d246", "825": "92a6227084e40105c8461a3f8bab1f738bfc16a8", "826": "067d73e3ad5419fce74995fffb7bed28fc1575d0", "827": "5ed7b80d1e315346e57202592cf9fb1c9d706874", "828": "50be06e6954d2ad1ddb7083f55455b070c976617", "829": "4b4c01a4e2fe62beb8c9fff78f538b90865b4fe9", "830": "4677981c542415d1763c32226a051fc1587f7bb5", "831": "3b9494c007ed036bf4b6b2c4f59b937ebb4a7288", "832": "8132fc88b7383a303d1aed5c6e6866aa5fee4a11", "833": "30c973c42fccb4e1ff95b69d4fe8992e76f2cc68", "834": "9224ca3a964132b9b793afd99269d8706d91c9e5", "835": "fe164720b9adab93cef990a2afe74d98be008c34", "836": "e6abc9d2dd9d13873a084d5b22273a180a4b8f11", "837": "9e6cc09e02bedda09e4994aa87a662d75ec1954b", "838": "00f3001dfdea8a784a205d1cbfb70125f90b0a50", "839": "004e6e2881488b70f7a1b89a1508bafa9e60ecce", "840": "178c2a736bf6c0f0d8fbcbd598fe3bd24eccf0e2", "841": "122d1b2ac5a1a35bbcdd353928953642e6c70039", "842": "cbd59edc0c3d3c00e097a5d686531f95088e3c64", "843": "c1b99e872148840935ce063f94a33b663673d78d", "844": "496abac5c0e1172c61184c89357b0461e48c2ae1", "845": "dd7e798b3398c6e6aff940addf95be1eaa9ea9e9", "846": "7cea7a2e1153f82e132d75e8a89bfab6832194e5", "847": "183d08180eef75f9ff566c6ecd75dad8282dbdd7", "848": "0d469c3951e38706bfb56d60c74bc792f0c472aa", "849": "a46a6e0dd38212cd392764ea63f5d8e2379f4e00", "850": "60bc0bdd77e7de13a7c71149d48cf76818a5aedb", "851": "403347c17c318959715a18a7d0f3c277313bd8d0", "852": "0e83ba9cb77e0b3f6f795379e834568d5bd2bfbc", "853": "ef61b8a16c4942a3ccd2db94d1e4e56360c6e566", "854": "5842fbf7dba8c50cfe6b56e5dde170922ec082c6", "855": "54b107d128fbfaeef7e771a35928356dd3e120c5", "856": "8dd3248e6402e42c1cb7b6927cb03cb915878cd9", "857": "a75a99f481cbc3176f77da8b8b937d6220208b69", "858": "193d2417919b3582546362297288dc6764d26ebc", "859": "8682b71c0a09807b25bfea05c9f54e3c6fd84460", "860": "c06ce072fb937f95b1a8b84b36298755df2540b5", "861": "c9152e20b7a7dedfc1758eaa1979ace3bc704405", "862": "cf8e49264ee6138b4d5bb260ce4555cdf49007d5", "863": "27eb020e974fb0a596329c664770c44f20fd326c", "864": "426199ab4921f196a026c01406702a5522b6e466", "865": "65793ec9c9c5c34c10ac7d47b0b7ea889f37ebda", "866": "ccfdb71bd5664f167dc6aac25f84733c23089db4", "867": "2b9e8a4d0d0c8044f64544b6dcfbb521dcc2bd9b", "868": "e2d3c2508db4e9829d1abe278a91939b741cc716", "869": "e37184a000c2451a17a661325a6be471bb57f13b", "870": "1762609ac805016cb9fff35abf60cd5ddaf278f1", "871": "babdc3fbe7c13b6e7983ca5c9e78f987d3289122", "872": "c5a3096e9484b0d0c9068a54048a68d7ef69371e", "873": "be3c9061603c02e134ff55f5eb7d2b29b8a01cbd", "874": "03d4bf29454180e955fb975d3ca491542018ae94", "875": "51caca181968d45b8310c07950d449585beb14fa", "876": "6388b257265007c338edcf8a6c3c0604a1ddb5b8", "877": "408c470d4d64adaa3fbae3dc902d9c1c91bace78", "878": "61e5d7b449a083fb6eff48bd2f1f53ab7a4c93df", "879": "663e21b18880e703077d572f6cda7a4f5231cb7d", "880": "ef178359b7ef18292c1b397bc77a24de4fe4494e", "881": "6b1f3039f2d7533b40684153ec2c9c61eaae4f58", "882": "6d54ff1e59643616c7a7e6b9342df7dd061b71b1", "883": "223cb03da370ba089c04edb7bf25260073f38f09", "884": "1d57779cb7f5d8c0a97a5a84c78583767890e387", "885": "eb6637e52a7e62de282eeeb5eb25c7359b93d837", "886": "7ae67cf9bda1033a10121768a50745e3f0a04713", "887": "6b0931f17a4e6fa37e9a1dae937ad2989797dc78", "888": "571bbfa19bdcf78587fddcd43361ae25a0b6a50c", "889": "b72537ab2f26e06e16374c9952898311b6446ce4", "890": "53fbd66afd754e0f1b433cc1b74152ce132a9bfc", "891": "a8c49a0b6153971965ef1cd96767d4092344a39b", "892": "7a266ea07c63209d030de46adc18be80c4d47521", "893": "bcf510373b822096399147ccf6a28bfb3a709db9", "894": "2e68c7681d9e018a308f5368ce73a041b2d28aea", "895": "9f61eca5e6a0eef6950bf0753d6ea6ad1b82c111", "896": "afe85a7c585b4af4c0d09a88579a1b183cb7ae0d", "897": "900ae36b5fa7670809e33346b1abc871e9314d1d", "898": "08448ce5237d9e2a045d95b4fc79341bcf9f57f5", "899": "51886097be97922ebdc3e7fb89265f1bc6373434", "900": "f1ebd1234a9d23bd3cb206d338c34f0681794a1f", "901": "52aa8c4b066a82a62fe3f7f91798ae00e653c93b", "902": "7805e94e503b3e78733db29b8446446359b94932", "903": "0fdf09afc9179f00a39c966df0911fb8d8560874", "904": "b551ec827aeb26b0c31e84e2c498f2e9a01eaf4f", "905": "25de2bf7cb67079b5d5603f81ab0790a5bf9d7e8", "906": "a354a136bff123cd68be0d07ee963388c2378b53", "907": "85cd0e330254e75217f38590612d604705b6ed1d", "908": "4463f076fbc0a57f26342a38d36e7c2ba0d962ef", "909": "e27f87f6494f2ad2b096d7eb2ea3878c35e31023", "910": "61679c577fd6d6ee947e125be1f73971999e9d72", "911": "ab27e1d838d94e1479a35007298530ff479b56ec", "912": "13e80ec66a210a4d40607e8b9325ef169c88fb18", "913": "6a0557395da4bd83ab292904a04d09a813dc0c9d", "914": "aa96d13dac88ba15855633851dd7468336c32e34", "915": "bdd1c6701eb5dc458fabea49afd6e0ad88391a2c", "916": "17b3874cf8c883b0ed43a4d5191afdb015e8d671", "917": "b17199942ad76a031a06ae077652d0591c75f0f2", "918": "6c5b3e96c26d45480ce3e299bb822dcc91b8e0bb", "919": "0721f72b9ba2250d29dc945c0c890760f0378111", "920": "7cc8b483d777c26a851d936e0766b5f57ff80ab1", "921": "e1eeea2628fd3770ae3883d0c58f0b1a5998b0a8", "922": "5ff67d2a0570103548baeea4e4665e8e829314e8", "923": "8af947bef2be2a74bd4c623dc0594aa910095974", "924": "1e73fb21f6cc31c518bde2ebe0a008f73c53bbca", "925": "1c3d9b3b4e0bb1da49528b86e7cd29afa6070c87", "926": "822093234d3d7b5688666c8d839f33d1ed1ac953", "927": "300f458654390fd45872f5cf763a57aeefb0b485", "928": "cb9e5ec07384913049a312ac62cfec88970f1c8d", "929": "71c49903f845f3c3bc5a4a2e781e352238509ecd", "930": "7dc3bab56b55161bd32a7c701ee80696bda63b87", "931": "d3acf231f2c248b39e89739da47302fd3a2d4172", "932": "08285165bc87631d43bd65b699c818be01c14d90", "933": "6581beaf8a7c128042d0803e68f007d5c2e51537", "934": "0ca699109501a9fc01173a54ce9f00f243058b0e", "935": "b524340be7d0a55262456734bfe40ee1e4b642fe", "936": "eb5861fc8a92851db6b6d8688ef306157a3c6a49", "937": "6426fcafe8df2855847bbabfbbb3a0d0ac26e745", "938": "033d23515562e727ce5e9ad984e7a4f280d5ee6d", "939": "ac4508bc5e8e67c2088e9d00bf5bc68e55f689f6", "940": "efdb5425f33d0b0019768f929822eae41a4aacdf", "941": "0e976c2cacad18118a54f3edf9ca86cc9efeeaa7", "942": "3756358850579183863bd7a60e88a840bde8cc36", "943": "52318771543fc352d38a62819c2bad51a95ee4b7", "944": "f30c36f6d612a9fb3f75c9fdb5fd153ab032a206", "945": "1d82e80a3a0c37f64aea836d1637f7df3164e0c2", "946": "48e566f3ecfc5b14e37ca24b203c7e8b677acde3", "947": "4e0f49d7743b91b9478611bd02466eb0b49acaab", "948": "d2eabf325063f0901430217170729399a8ced45d", "949": "8d0b71021b41069d52a66d4ab28d3c2dbe5b89d2", "950": "6c740a4df132efdf4f4e0fa5f8a1ec2fae4f0828", "951": "38f968a5f1d26df50474e282f57a073c2f8d9ee2", "952": "460392b1fcb78324ed90edb8da9612e95bfb525e", "953": "ec695550a079d4941cbb54f313ad01f1057456c8", "954": "1c3948b8ab8bb7ce1dfb309c9f1e12bb7c8cc771", "955": "5cde79ccf7f147905c6473e450adf22d1808c48f", "956": "ae3b475407df09444d202248c5a13e34b89eaefe", "957": "c74296afca6ec2e43e6818011f6b6d25227d22c2", "958": "7940b6f8fee125607223612352da70cab57238ae", "959": "7fe4fd5610faadd352ac720350997796627ca3c4", "960": "399964766978b40aedba4b7bb15649c59bb0b271", "961": "fed9dfc1df0ac9ea3a2182adaa76fa81a51da89c", "962": "d050f26888dd5ef8cbf0bd96c9fc86e269aa9ae0", "963": "595f55f9f235fd0396d02b9a6f828aba2383dceb", "964": "36c1a70550c3e01ee793bb36171ee3341a180bb7", "965": "3f836be167b27a16e7dd65b3e0cfb6e3a4cff2a0", "966": "378a0b86f538f5bfe21c0ed43698c083ca55818a", "967": "35f79b73d848a21600e0bb2781d5d9e0cb06cdef", "968": "b451a4d5f0f09e59e928eb324aa38ec364cf0824", "969": "46eeb578e4204ae5c3395fc06bf6f3b6ac215542", "970": "5ee705474e568a96b5d96ed36480be29a79e9d6f", "971": "f515c51d373008afb917beb6eb6fa2b34a7b3371", "972": "a007dc775e3a998c356b43ae45ad32231fa81ff8", "973": "c6f87341da0ed93094f1d646426e016e2f59767f", "974": "d85361e63893413a4c7a838d014b7dba64450beb", "975": "b575bedf96fe83273e57436fcead711576fb465b", "976": "328695e80f07caac654e8dcfe14b333a5d9b7c5e", "977": "7d3cf9910b220602539dacae80502b893e3c0274", "978": "2044c8904a6365394da38d2019545a3954ac8396", "979": "646d7faa4ce3bffc3ad51442a2646cacdf761bd4", "980": "a9fb065db48e22eb902f0be5e387fd719b9b436a", "981": "44703f42086f742847839d5a562cd0d3c67a35a4", "982": "9eb1ad6cd2b728f617f9b323c7ad1714dd9ae6e6", "983": "da70ae68c79ec0448adfdb51d1e53892af642a55", "984": "7008d979436a5534260b95cb539118ab59023b5f", "985": "e08bf4e1d8779f9a3b049ea8a758fb7ccae9ee34", "986": "5be1cf19529a7e278463a19cbf774df012350e03", "987": "0898ff0cda2adaff9837e4e8074aebebc2920c85", "988": "ddada486a0b8bdca0bedfef131344ddd5dad9981", "989": "3afbabe5c86eca1f5bdb6531e2e277fc3e2d52fb", "990": "5775c79586e9c8b94b2a8eeed93af61b5dafbd9c", "991": "a216862c7f28b9942ed9f3faae767285778ae197", "992": "bccf954c48f3c6c4fdc071c6fb667e1f0ef826e4", "993": "2c9eca5fb9122b48a27193fad45ac482d4ebdf36", "994": "d80c703b791eab78434331d7ed17ddb54c16d28f", "995": "424520dcf1575e4177ae821771908a1bddbd793e", "996": "a060bd6144d37460de03428efc95f271881c2330", "997": "06cd3e1d8c193c425f01d72a8b4f7301541444ca", "998": "19beef7baca970af61c3682570662f50ca698f53", "999": "9b1231e07b9535c9e58d5f16e9dcadb10f53699a", "1000": "4d98588c0b9963f76673512db230cd6b5cb44197", "1001": "6cdd2293db312fd29cca767850dfdc50eb572199", "1002": "986be1697ddb35218ca9d917b8d9d089440abfff", "1003": "a8eaf8b6a37a3f06a56bf4ca355206282c6f732d", "1004": "48ce7e88ea2dc60539dfba23a8d4f241bab1b4c6", "1005": "0534daba632f66229cc30ee03a20f3cca87fcbec", "1006": "951d32efebcc7024dfb97963b6eba18015ff2570", "1007": "1aa667d55843acf76b28674b99f59c25c9862063", "1008": "f908cb57dfb922a0e65ede2b21fb9c8ebb3204bc", "1009": "31a4ed65631127a869b4bf660f86b3e45be249ea", "1010": "50dc05e7d611fffc7d136b6c070279b61ec78eee", "1011": "888f9113558b2b4dd6bb91eb778d4810a7918190", "1012": "968e6eeaab2320f7de261184db1ff5763bcbba89", "1013": "23fcd6cd500d4f7fa41b015fd1b01b11feb6dd05", "1014": "e00f1219010a440d4fdf27bf0291d48bd7ee8ad1", "1015": "2332bd12271272ea9fbf05b582d74ab634a69fe5", "1016": "ae8e898bc32f795ce4f98dc7ad1dc1276f8ae1b2", "1017": "449b9b613c35b85cedf91f672718b809267f0e54", "1018": "d83e855ac9f6c3c8bfc26f231259603d914539b3", "1019": "95df418dde6b083acdb2dc3bed49c3ad4584307e", "1020": "8604e12c6c5d61194552bfe756b03e8069980019", "1021": "95f0adfce06ab1f31ae97dd0f26456f99309df5f", "1022": "be01b6e262a8d12d19153e80783421dcd6b8bf90", "1023": "3019a508126dba59703d1f4eb1537580ae2d390e", "1024": "86920be717058542ce47b523e761275a0e34c425", "1025": "c489de7cb9847ea1a3a43e2adac7a676621a71d9", "1026": "e36d55fbc4cf6ffd6585d90ec401393bd0e857cb", "1027": "835fc558a3e82e960fefc8db4d00b1a158233815", "1028": "49e09bc871b9ffb9634b43d83a78dad175b58905", "1029": "9ddc0163bb0324d7d4431740e8a9d519081c4dd5", "1030": "351e19112a408a56a0c8c80f13c42741186faf66", "1031": "9ca249c4569ad211649411270cb20591ed23642c", "1032": "fd0d9492b1279c1593ef6efc719c47092d1caa4c", "1033": "7f5a839ee1037c185c32a09818a2ad3060a5cb4d", "1034": "cbaa5f4f71cc56ae6d407026ae9d27bb883d9ec2", "1035": "2dadf9787357c5e3a54ed07fa466427fefc54185", "1036": "a55a5ae979e6cfe5ad455da86ed7205aaae8b9c7", "1037": "78cd1ed9e8e3b1302aae59d736ce1ccc4d61cbc3", "1038": "993a27524e91420253e2096dec1d845d02456ebf", "1039": "03582317d3fcef76347c4f6b119f31483231c1ae", "1040": "ceaff859e0eb3c3e85c0a8158bf978ebfc3142b4", "1041": "ab53e5d1773100d1aad21edb62f64ff99e465130", "1042": "28c8de2f59520f7a8ad5ee611ff6fad2c1e94400", "1043": "774c241cdac0b3cdf3559b471c0d86e3b85d6148", "1044": "b67b13be6ab3be439f06913f8c06e0690332624a", "1045": "2047d896ef6b4891d085c1984d556f165125a59d", "1046": "21f44dc2403b698ca0d0ea1489c078ce394565d6"}, "revision_to_date": {"326": 1593794977000, "343": 1594142273000, "349": 1594192124000, "350": 1594194666000, "351": 1594194695000, "352": 1594197775000, "353": 1594199419000, "354": 1594199526000, "363": 1594458186000, "364": 1594458388000, "365": 1594458470000, "366": 1594474715000, "367": 1594476469000, "488": 1595416786000, "493": 1595422140000, "505": 1595429738000, "506": 1595429944000, "507": 1595502966000, "508": 1595502995000, "509": 1595503951000, "510": 1595503980000, "511": 1595504322000, "512": 1595504595000, "513": 1595505107000, "514": 1595505889000, "515": 1595506033000, "516": 1595506451000, "517": 1595506501000, "518": 1595507091000, "519": 1595514273000, "521": 1595516011000, "524": 1595520474000, "525": 1595520520000, "526": 1595521887000, "527": 1595529249000, "528": 1595529342000, "529": 1595529368000, "530": 1595529437000, "531": 1595529476000, "532": 1595529716000, "533": 1595514866000, "534": 1595575100000, "535": 1595583162000, "536": 1595583206000, "537": 1595583834000, "538": 1595593647000, "539": 1595593815000, "540": 1595604176000, "541": 1595836556000, "542": 1595843297000, "543": 1595843751000, "544": 1595843850000, "545": 1595849084000, "546": 1595849534000, "547": 1595851250000, "548": 1595851280000, "549": 1595853787000, "550": 1595853829000, "551": 1595853850000, "552": 1595854429000, "553": 1595856669000, "554": 1595856957000, "555": 1595857588000, "556": 1595857995000, "557": 1595863720000, "558": 1595920836000, "559": 1595920930000, "560": 1595921857000, "561": 1595921871000, "562": 1595922205000, "563": 1595922434000, "564": 1595922489000, "565": 1595924347000, "566": 1595935098000, "567": 1595937217000, "568": 1595937296000, "569": 1595947156000, "570": 1595947456000, "571": 1595950062000, "572": 1595950548000, "573": 1595952474000, "574": 1595953746000, "575": 1595954019000, "576": 1595954353000, "577": 1596011889000, "578": 1596013552000, "579": 1596015590000, "580": 1596021266000, "581": 1596041157000, "582": 1596041683000, "583": 1596043498000, "584": 1596043515000, "585": 1596043547000, "586": 1596096564000, "587": 1596097088000, "588": 1596097675000, "589": 1596098810000, "590": 1596099185000, "591": 1596099486000, "592": 1596102604000, "593": 1596120716000, "594": 1596213094000, "595": 1596213382000, "596": 1596213495000, "597": 1596214060000, "598": 1596213557000, "599": 1596215131000, "600": 1596216135000, "601": 1596217617000, "602": 1596219650000, "603": 1596222544000, "604": 1596434607000, "605": 1596435503000, "606": 1596438967000, "607": 1596441061000, "608": 1596441091000, "609": 1596724436000, "610": 1597084401000, "611": 1597084583000, "612": 1597084772000, "613": 1597142517000, "614": 1597142560000, "615": 1597148779000, "616": 1597149612000, "617": 1597159665000, "618": 1597160822000, "619": 1597168253000, "620": 1597168328000, "621": 1597168614000, "622": 1597168764000, "623": 1597169005000, "624": 1597169312000, "625": 1597169326000, "626": 1597169768000, "627": 1597176917000, "628": 1597202772000, "629": 1597204028000, "630": 1597204721000, "631": 1597219699000, "632": 1597229513000, "633": 1597229713000, "634": 1597234195000, "635": 1597322472000, "636": 1597326137000, "637": 1597326444000, "638": 1597333641000, "639": 1597334085000, "640": 1597334684000, "641": 1597471578000, "642": 1597472593000, "643": 1597656427000, "644": 1595002638000, "645": 1597069720000, "646": 1597086225000, "647": 1597087467000, "648": 1597089549000, "649": 1597096564000, "650": 1597132994000, "651": 1597140961000, "652": 1597141015000, "653": 1597657283000, "654": 1597658644000, "655": 1597659045000, "656": 1597659450000, "657": 1597659769000, "658": 1597670284000, "659": 1597670329000, "660": 1597670931000, "661": 1597671649000, "662": 1597674301000, "663": 1597678898000, "664": 1597683381000, "665": 1597335459000, "666": 1597691398000, "667": 1597336353000, "668": 1597336384000, "669": 1597336401000, "670": 1597691683000, "671": 1597692061000, "672": 1597692171000, "673": 1597692424000, "674": 1597692622000, "675": 1597692687000, "676": 1597692844000, "677": 1597693129000, "678": 1597693137000, "679": 1597693346000, "680": 1597693424000, "681": 1597693886000, "682": 1597693902000, "683": 1597694602000, "684": 1597695396000, "685": 1597695559000, "686": 1597695578000, "687": 1597697851000, "688": 1597732421000, "689": 1597733988000, "690": 1597734355000, "691": 1597734474000, "692": 1597735213000, "693": 1597735457000, "694": 1597735542000, "695": 1597735593000, "696": 1597735836000, "697": 1597737360000, "698": 1597738216000, "699": 1597738600000, "700": 1597739401000, "701": 1597739633000, "702": 1597742501000, "703": 1597742929000, "704": 1597751867000, "705": 1597752112000, "706": 1597767018000, "707": 1597819018000, "708": 1597824583000, "709": 1597824668000, "710": 1597827787000, "711": 1597829391000, "712": 1597853247000, "713": 1597854641000, "714": 1598263867000, "715": 1598264911000, "716": 1598264972000, "717": 1598265094000, "718": 1598268798000, "719": 1598270911000, "720": 1598271321000, "721": 1598272217000, "722": 1598272336000, "723": 1598273955000, "724": 1598273974000, "725": 1598274229000, "726": 1598274593000, "727": 1598274895000, "728": 1598275602000, "729": 1598276632000, "730": 1598279762000, "731": 1598280019000, "732": 1598280142000, "733": 1598280464000, "734": 1598280676000, "735": 1598281173000, "736": 1598338121000, "737": 1598338167000, "738": 1598338208000, "739": 1598340020000, "740": 1598342033000, "741": 1598342984000, "742": 1598351586000, "743": 1598358146000, "744": 1598362041000, "745": 1598362195000, "746": 1598374452000, "747": 1598374479000, "748": 1598430397000, "749": 1598430674000, "750": 1598431742000, "751": 1598431911000, "752": 1598432014000, "753": 1598432044000, "754": 1598432081000, "755": 1598432128000, "756": 1598432173000, "757": 1598432230000, "758": 1598432843000, "759": 1598434786000, "760": 1598435080000, "761": 1598435110000, "762": 1598436491000, "763": 1598436567000, "764": 1598436840000, "765": 1598442078000, "767": 1598443321000, "768": 1598447703000, "771": 1598449761000, "776": 1598453835000, "779": 1598510744000, "780": 1598513037000, "782": 1598513709000, "783": 1598514051000, "784": 1598523558000, "785": 1598523591000, "786": 1598523812000, "787": 1598523919000, "788": 1598523991000, "789": 1598524199000, "790": 1598604009000, "791": 1598604407000, "792": 1598604675000, "793": 1598624432000, "794": 1598626500000, "795": 1598626748000, "796": 1598802590000, "797": 1598863768000, "798": 1598946674000, "799": 1598947233000, "800": 1598978270000, "801": 1599248642000, "802": 1599483442000, "803": 1600260170000, "804": 1600333076000, "805": 1600691540000, "806": 1602011492000, "807": 1602087852000, "808": 1602230999000, "809": 1602231759000, "810": 1602233267000, "811": 1602240859000, "812": 1603091927000, "813": 1603091939000, "814": 1603091966000, "815": 1603091979000, "816": 1603092003000, "817": 1603092018000, "818": 1603092035000, "819": 1603092046000, "820": 1603092066000, "821": 1603092109000, "822": 1603092640000, "823": 1603094637000, "824": 1603094662000, "825": 1603094899000, "826": 1603096610000, "827": 1603097781000, "828": 1603097792000, "829": 1603098182000, "830": 1603098493000, "831": 1603113390000, "832": 1603284418000, "833": 1603370320000, "834": 1603372461000, "835": 1603372474000, "836": 1603372489000, "837": 1603372523000, "838": 1603372536000, "839": 1603389386000, "840": 1603396097000, "841": 1603453489000, "842": 1603453614000, "843": 1603457892000, "844": 1603457924000, "845": 1603457931000, "846": 1603458087000, "847": 1603459036000, "848": 1603460128000, "849": 1603460585000, "850": 1603460929000, "851": 1603462667000, "852": 1603462762000, "853": 1603463589000, "854": 1603463700000, "855": 1603463720000, "856": 1603464745000, "857": 1603464806000, "858": 1603465263000, "859": 1603538981000, "860": 1604473520000, "861": 1604476601000, "862": 1604931121000, "863": 1605003810000, "864": 1605025643000, "865": 1605027694000, "866": 1605085863000, "867": 1605099589000, "868": 1605114441000, "869": 1605168230000, "870": 1605168856000, "871": 1605864368000, "872": 1605892190000, "873": 1606337720000, "874": 1606823854000, "875": 1606831728000, "876": 1606904383000, "877": 1606914815000, "878": 1607343910000, "879": 1607345342000, "880": 1607345386000, "881": 1607345426000, "882": 1607421827000, "883": 1607450405000, "884": 1607453115000, "885": 1607517703000, "886": 1607548130000, "887": 1607592652000, "888": 1607943116000, "889": 1607943371000, "890": 1607943540000, "891": 1607949199000, "892": 1608054216000, "893": 1608483311000, "894": 1608541399000, "895": 1608629731000, "896": 1608636698000, "897": 1609493591000, "898": 1610462151000, "899": 1610614270000, "900": 1610694721000, "901": 1611425331000, "902": 1612429205000, "903": 1612431047000, "904": 1612459100000, "905": 1612800487000, "906": 1613027615000, "907": 1613491026000, "908": 1613502258000, "909": 1613547518000, "910": 1613550275000, "911": 1613551401000, "912": 1613736444000, "913": 1614064835000, "914": 1614116463000, "915": 1614169467000, "916": 1614176727000, "917": 1614248384000, "918": 1614596096000, "919": 1614680026000, "920": 1614686389000, "921": 1614692314000, "922": 1614778142000, "923": 1615278706000, "924": 1615293702000, "925": 1615299798000, "926": 1615361949000, "927": 1615364277000, "928": 1615976560000, "929": 1616140194000, "930": 1616153850000, "931": 1616417326000, "932": 1616486430000, "933": 1616494726000, "934": 1616754786000, "935": 1616756466000, "936": 1616771313000, "937": 1616773054000, "938": 1616780053000, "939": 1616837811000, "940": 1616839429000, "941": 1616913980000, "942": 1616999939000, "943": 1618423810000, "944": 1618424726000, "945": 1618469541000, "946": 1618471756000, "947": 1618557563000, "948": 1618578536000, "949": 1618938606000, "950": 1619003293000, "951": 1619505297000, "952": 1619538515000, "953": 1619616043000, "954": 1619714004000, "955": 1619789327000, "956": 1619790373000, "957": 1619794206000, "958": 1619873890000, "959": 1619949718000, "960": 1620055650000, "961": 1620213114000, "962": 1620222235000, "963": 1620289827000, "964": 1620313633000, "965": 1620448384000, "966": 1620672297000, "967": 1620727668000, "968": 1620991263000, "969": 1621177821000, "970": 1622010299000, "971": 1623829569000, "972": 1623830799000, "973": 1623840887000, "974": 1623841903000, "975": 1623847087000, "976": 1623930138000, "977": 1624008831000, "978": 1624287992000, "979": 1624371192000, "980": 1624371801000, "981": 1624371999000, "982": 1624373268000, "983": 1624962452000, "984": 1624966790000, "985": 1624978905000, "986": 1624979920000, "987": 1624995150000, "988": 1625069630000, "989": 1625138025000, "990": 1625138178000, "991": 1625139092000, "992": 1625479001000, "993": 1625501748000, "994": 1625502756000, "995": 1625659496000, "996": 1625666687000, "997": 1625729751000, "998": 1625743413000, "999": 1625758200000, "1000": 1625759817000, "1001": 1625762649000, "1002": 1625764573000, "1003": 1625765904000, "1004": 1625811718000, "1005": 1625841011000, "1006": 1626071337000, "1007": 1626074714000, "1008": 1626078094000, "1009": 1626095167000, "1010": 1626097349000, "1011": 1626177594000, "1012": 1626269628000, "1013": 1626271591000, "1014": 1626276241000, "1015": 1626340739000, "1016": 1626376371000, "1017": 1626426028000, "1018": 1626538793000, "1019": 1626626226000, "1020": 1626690190000, "1021": 1626695822000, "1022": 1626961094000, "1023": 1627039481000, "1024": 1627291218000, "1025": 1627383614000, "1026": 1627893414000, "1027": 1628081678000, "1028": 1628170437000, "1029": 1628224518000, "1030": 1628322132000, "1031": 1628518901000, "1032": 1628676830000, "1033": 1628710031000, "1034": 1628757617000, "1035": 1628777353000, "1036": 1629217313000, "1037": 1630340612000, "1038": 1630340757000, "1039": 1630342682000, "1040": 1630405405000, "1041": 1630413315000, "1042": 1630416240000, "1043": 1630488362000, "1044": 1630571261000, "1045": 1630823799000, "1046": 1630825067000}, "params": {"machine": ["unitue-mlcloud-probnum"], "python": ["3.8"], "branch": ["main"]}, "graph_param_list": [{"machine": "unitue-mlcloud-probnum", "python": "3.8", "branch": "main"}], "benchmarks": {"filtsmooth.DenseGridOperations.peakmem_dense_filter": {"code": "class DenseGridOperations:\n    def peakmem_dense_filter(self, linearization_implementation, num_samples):\n        self.filtering_posterior(self.dense_locations)\n\n    def setup(self, linearization_implementation, num_samples):\n        measvar = 0.1024\n        initrv = randvars.Normal(np.ones(2), measvar * np.eye(2))\n        rng = np.random.default_rng(seed=1)\n        regression_problem, info = filtsmooth_zoo.pendulum(\n            rng=rng,\n            measurement_variance=measvar,\n            timespan=(0.0, 4.0),\n            step=0.0075,\n            initrv=initrv,\n        )\n        prior_process = info[\"prior_process\"]\n    \n        linearization, implementation = linearization_implementation\n        _lin_method = {\n            \"ekf\": functools.partial(\n                filtsmooth.gaussian.approx.DiscreteEKFComponent,\n                forward_implementation=implementation,\n                backward_implementation=implementation,\n            ),\n            \"ukf\": filtsmooth.gaussian.approx.DiscreteUKFComponent,\n        }[linearization]\n    \n        self.dense_locations = np.sort(\n            np.unique(\n                np.random.uniform(\n                    low=regression_problem.locations[0],\n                    high=1.2 * regression_problem.locations[-1],\n                    size=int(1.2 * len(regression_problem.locations)),\n                )\n            )\n        )\n    \n        linearized_dynmod = _lin_method(prior_process.transition)\n        linearized_measmod = _lin_method(regression_problem.measurement_models[0])\n        regression_problem.measurement_models = [linearized_measmod] * len(\n            regression_problem.locations\n        )\n    \n        prior_process = randprocs.markov.MarkovProcess(\n            transition=linearized_dynmod,\n            initrv=prior_process.initrv,\n            initarg=regression_problem.locations[0],\n        )\n    \n        self.kalman_filter = filtsmooth.gaussian.Kalman(prior_process=prior_process)\n    \n        self.filtering_posterior, _ = self.kalman_filter.filter(regression_problem)\n        self.smoothing_posterior = self.kalman_filter.smooth(\n            filter_posterior=self.filtering_posterior\n        )", "name": "filtsmooth.DenseGridOperations.peakmem_dense_filter", "param_names": ["linearization_implementation", "num_samples"], "params": [["('ekf', 'classic')", "('ekf', 'sqrt')", "('ukf', 'classic')"], ["1", "10"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "04c24e9957138713fff0c0785f2ebe9453287cbb3a071fa7ec5d2a9cb13edafe"}, "filtsmooth.DenseGridOperations.peakmem_dense_smoother": {"code": "class DenseGridOperations:\n    def peakmem_dense_smoother(self, linearization_implementation, num_samples):\n        self.smoothing_posterior(self.dense_locations)\n\n    def setup(self, linearization_implementation, num_samples):\n        measvar = 0.1024\n        initrv = randvars.Normal(np.ones(2), measvar * np.eye(2))\n        rng = np.random.default_rng(seed=1)\n        regression_problem, info = filtsmooth_zoo.pendulum(\n            rng=rng,\n            measurement_variance=measvar,\n            timespan=(0.0, 4.0),\n            step=0.0075,\n            initrv=initrv,\n        )\n        prior_process = info[\"prior_process\"]\n    \n        linearization, implementation = linearization_implementation\n        _lin_method = {\n            \"ekf\": functools.partial(\n                filtsmooth.gaussian.approx.DiscreteEKFComponent,\n                forward_implementation=implementation,\n                backward_implementation=implementation,\n            ),\n            \"ukf\": filtsmooth.gaussian.approx.DiscreteUKFComponent,\n        }[linearization]\n    \n        self.dense_locations = np.sort(\n            np.unique(\n                np.random.uniform(\n                    low=regression_problem.locations[0],\n                    high=1.2 * regression_problem.locations[-1],\n                    size=int(1.2 * len(regression_problem.locations)),\n                )\n            )\n        )\n    \n        linearized_dynmod = _lin_method(prior_process.transition)\n        linearized_measmod = _lin_method(regression_problem.measurement_models[0])\n        regression_problem.measurement_models = [linearized_measmod] * len(\n            regression_problem.locations\n        )\n    \n        prior_process = randprocs.markov.MarkovProcess(\n            transition=linearized_dynmod,\n            initrv=prior_process.initrv,\n            initarg=regression_problem.locations[0],\n        )\n    \n        self.kalman_filter = filtsmooth.gaussian.Kalman(prior_process=prior_process)\n    \n        self.filtering_posterior, _ = self.kalman_filter.filter(regression_problem)\n        self.smoothing_posterior = self.kalman_filter.smooth(\n            filter_posterior=self.filtering_posterior\n        )", "name": "filtsmooth.DenseGridOperations.peakmem_dense_smoother", "param_names": ["linearization_implementation", "num_samples"], "params": [["('ekf', 'classic')", "('ekf', 'sqrt')", "('ukf', 'classic')"], ["1", "10"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "06717c47a9c1eb5b5099cc393bce8ca7cf6b91b4b2fb94dce9c0548ef5b5422c"}, "filtsmooth.DenseGridOperations.peakmem_sample": {"code": "class DenseGridOperations:\n    def peakmem_sample(self, linearization_implementation, num_samples):\n        rng = np.random.default_rng(seed=1)\n        self.smoothing_posterior.sample(\n            rng=rng, t=self.dense_locations, size=num_samples\n        )\n\n    def setup(self, linearization_implementation, num_samples):\n        measvar = 0.1024\n        initrv = randvars.Normal(np.ones(2), measvar * np.eye(2))\n        rng = np.random.default_rng(seed=1)\n        regression_problem, info = filtsmooth_zoo.pendulum(\n            rng=rng,\n            measurement_variance=measvar,\n            timespan=(0.0, 4.0),\n            step=0.0075,\n            initrv=initrv,\n        )\n        prior_process = info[\"prior_process\"]\n    \n        linearization, implementation = linearization_implementation\n        _lin_method = {\n            \"ekf\": functools.partial(\n                filtsmooth.gaussian.approx.DiscreteEKFComponent,\n                forward_implementation=implementation,\n                backward_implementation=implementation,\n            ),\n            \"ukf\": filtsmooth.gaussian.approx.DiscreteUKFComponent,\n        }[linearization]\n    \n        self.dense_locations = np.sort(\n            np.unique(\n                np.random.uniform(\n                    low=regression_problem.locations[0],\n                    high=1.2 * regression_problem.locations[-1],\n                    size=int(1.2 * len(regression_problem.locations)),\n                )\n            )\n        )\n    \n        linearized_dynmod = _lin_method(prior_process.transition)\n        linearized_measmod = _lin_method(regression_problem.measurement_models[0])\n        regression_problem.measurement_models = [linearized_measmod] * len(\n            regression_problem.locations\n        )\n    \n        prior_process = randprocs.markov.MarkovProcess(\n            transition=linearized_dynmod,\n            initrv=prior_process.initrv,\n            initarg=regression_problem.locations[0],\n        )\n    \n        self.kalman_filter = filtsmooth.gaussian.Kalman(prior_process=prior_process)\n    \n        self.filtering_posterior, _ = self.kalman_filter.filter(regression_problem)\n        self.smoothing_posterior = self.kalman_filter.smooth(\n            filter_posterior=self.filtering_posterior\n        )", "name": "filtsmooth.DenseGridOperations.peakmem_sample", "param_names": ["linearization_implementation", "num_samples"], "params": [["('ekf', 'classic')", "('ekf', 'sqrt')", "('ukf', 'classic')"], ["1", "10"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "40f48e9b607c19e83208d3e321b8244e8b46029694be83d71e2be719bdd4b18d"}, "filtsmooth.DenseGridOperations.time_dense_filter": {"code": "class DenseGridOperations:\n    def time_dense_filter(self, linearization_implementation, num_samples):\n        self.filtering_posterior(self.dense_locations)\n\n    def setup(self, linearization_implementation, num_samples):\n        measvar = 0.1024\n        initrv = randvars.Normal(np.ones(2), measvar * np.eye(2))\n        rng = np.random.default_rng(seed=1)\n        regression_problem, info = filtsmooth_zoo.pendulum(\n            rng=rng,\n            measurement_variance=measvar,\n            timespan=(0.0, 4.0),\n            step=0.0075,\n            initrv=initrv,\n        )\n        prior_process = info[\"prior_process\"]\n    \n        linearization, implementation = linearization_implementation\n        _lin_method = {\n            \"ekf\": functools.partial(\n                filtsmooth.gaussian.approx.DiscreteEKFComponent,\n                forward_implementation=implementation,\n                backward_implementation=implementation,\n            ),\n            \"ukf\": filtsmooth.gaussian.approx.DiscreteUKFComponent,\n        }[linearization]\n    \n        self.dense_locations = np.sort(\n            np.unique(\n                np.random.uniform(\n                    low=regression_problem.locations[0],\n                    high=1.2 * regression_problem.locations[-1],\n                    size=int(1.2 * len(regression_problem.locations)),\n                )\n            )\n        )\n    \n        linearized_dynmod = _lin_method(prior_process.transition)\n        linearized_measmod = _lin_method(regression_problem.measurement_models[0])\n        regression_problem.measurement_models = [linearized_measmod] * len(\n            regression_problem.locations\n        )\n    \n        prior_process = randprocs.markov.MarkovProcess(\n            transition=linearized_dynmod,\n            initrv=prior_process.initrv,\n            initarg=regression_problem.locations[0],\n        )\n    \n        self.kalman_filter = filtsmooth.gaussian.Kalman(prior_process=prior_process)\n    \n        self.filtering_posterior, _ = self.kalman_filter.filter(regression_problem)\n        self.smoothing_posterior = self.kalman_filter.smooth(\n            filter_posterior=self.filtering_posterior\n        )", "min_run_count": 2, "name": "filtsmooth.DenseGridOperations.time_dense_filter", "number": 0, "param_names": ["linearization_implementation", "num_samples"], "params": [["('ekf', 'classic')", "('ekf', 'sqrt')", "('ukf', 'classic')"], ["1", "10"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "69cb869d04c8a1558fad0aa3dffb778570cea2a4e94d32989f8c15a4a9be57b2", "warmup_time": -1}, "filtsmooth.DenseGridOperations.time_dense_smoother": {"code": "class DenseGridOperations:\n    def time_dense_smoother(self, linearization_implementation, num_samples):\n        self.smoothing_posterior(self.dense_locations)\n\n    def setup(self, linearization_implementation, num_samples):\n        measvar = 0.1024\n        initrv = randvars.Normal(np.ones(2), measvar * np.eye(2))\n        rng = np.random.default_rng(seed=1)\n        regression_problem, info = filtsmooth_zoo.pendulum(\n            rng=rng,\n            measurement_variance=measvar,\n            timespan=(0.0, 4.0),\n            step=0.0075,\n            initrv=initrv,\n        )\n        prior_process = info[\"prior_process\"]\n    \n        linearization, implementation = linearization_implementation\n        _lin_method = {\n            \"ekf\": functools.partial(\n                filtsmooth.gaussian.approx.DiscreteEKFComponent,\n                forward_implementation=implementation,\n                backward_implementation=implementation,\n            ),\n            \"ukf\": filtsmooth.gaussian.approx.DiscreteUKFComponent,\n        }[linearization]\n    \n        self.dense_locations = np.sort(\n            np.unique(\n                np.random.uniform(\n                    low=regression_problem.locations[0],\n                    high=1.2 * regression_problem.locations[-1],\n                    size=int(1.2 * len(regression_problem.locations)),\n                )\n            )\n        )\n    \n        linearized_dynmod = _lin_method(prior_process.transition)\n        linearized_measmod = _lin_method(regression_problem.measurement_models[0])\n        regression_problem.measurement_models = [linearized_measmod] * len(\n            regression_problem.locations\n        )\n    \n        prior_process = randprocs.markov.MarkovProcess(\n            transition=linearized_dynmod,\n            initrv=prior_process.initrv,\n            initarg=regression_problem.locations[0],\n        )\n    \n        self.kalman_filter = filtsmooth.gaussian.Kalman(prior_process=prior_process)\n    \n        self.filtering_posterior, _ = self.kalman_filter.filter(regression_problem)\n        self.smoothing_posterior = self.kalman_filter.smooth(\n            filter_posterior=self.filtering_posterior\n        )", "min_run_count": 2, "name": "filtsmooth.DenseGridOperations.time_dense_smoother", "number": 0, "param_names": ["linearization_implementation", "num_samples"], "params": [["('ekf', 'classic')", "('ekf', 'sqrt')", "('ukf', 'classic')"], ["1", "10"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "edbf81162b7a27d98f83ca8ef7813b9134439353c8ab7d9aef584a2b0af6e9f0", "warmup_time": -1}, "filtsmooth.DenseGridOperations.time_sample": {"code": "class DenseGridOperations:\n    def time_sample(self, linearization_implementation, num_samples):\n        rng = np.random.default_rng(seed=1)\n        self.smoothing_posterior.sample(\n            rng=rng, t=self.dense_locations, size=num_samples\n        )\n\n    def setup(self, linearization_implementation, num_samples):\n        measvar = 0.1024\n        initrv = randvars.Normal(np.ones(2), measvar * np.eye(2))\n        rng = np.random.default_rng(seed=1)\n        regression_problem, info = filtsmooth_zoo.pendulum(\n            rng=rng,\n            measurement_variance=measvar,\n            timespan=(0.0, 4.0),\n            step=0.0075,\n            initrv=initrv,\n        )\n        prior_process = info[\"prior_process\"]\n    \n        linearization, implementation = linearization_implementation\n        _lin_method = {\n            \"ekf\": functools.partial(\n                filtsmooth.gaussian.approx.DiscreteEKFComponent,\n                forward_implementation=implementation,\n                backward_implementation=implementation,\n            ),\n            \"ukf\": filtsmooth.gaussian.approx.DiscreteUKFComponent,\n        }[linearization]\n    \n        self.dense_locations = np.sort(\n            np.unique(\n                np.random.uniform(\n                    low=regression_problem.locations[0],\n                    high=1.2 * regression_problem.locations[-1],\n                    size=int(1.2 * len(regression_problem.locations)),\n                )\n            )\n        )\n    \n        linearized_dynmod = _lin_method(prior_process.transition)\n        linearized_measmod = _lin_method(regression_problem.measurement_models[0])\n        regression_problem.measurement_models = [linearized_measmod] * len(\n            regression_problem.locations\n        )\n    \n        prior_process = randprocs.markov.MarkovProcess(\n            transition=linearized_dynmod,\n            initrv=prior_process.initrv,\n            initarg=regression_problem.locations[0],\n        )\n    \n        self.kalman_filter = filtsmooth.gaussian.Kalman(prior_process=prior_process)\n    \n        self.filtering_posterior, _ = self.kalman_filter.filter(regression_problem)\n        self.smoothing_posterior = self.kalman_filter.smooth(\n            filter_posterior=self.filtering_posterior\n        )", "min_run_count": 2, "name": "filtsmooth.DenseGridOperations.time_sample", "number": 0, "param_names": ["linearization_implementation", "num_samples"], "params": [["('ekf', 'classic')", "('ekf', 'sqrt')", "('ukf', 'classic')"], ["1", "10"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "7b414311f5640ce62678ee97c5113bf406b51509d72ffe8fb82d3c054dc87fd5", "warmup_time": -1}, "filtsmooth.Filtering.peakmem_filter": {"code": "class Filtering:\n    def peakmem_filter(self, linearization_implementation):\n        self.kalman_filter.filter(self.regression_problem)\n\n    def setup(self, linearization_implementation):\n        measvar = 0.1024\n        initrv = randvars.Normal(np.ones(2), measvar * np.eye(2))\n        rng = np.random.default_rng(seed=1)\n        regression_problem, info = filtsmooth_zoo.pendulum(\n            rng=rng,\n            measurement_variance=measvar,\n            timespan=(0.0, 4.0),\n            step=0.0075,\n            initrv=initrv,\n        )\n        prior_process = info[\"prior_process\"]\n    \n        linearization, implementation = linearization_implementation\n        _lin_method = {\n            \"ekf\": functools.partial(\n                filtsmooth.gaussian.approx.DiscreteEKFComponent,\n                forward_implementation=implementation,\n                backward_implementation=implementation,\n            ),\n            \"ukf\": filtsmooth.gaussian.approx.DiscreteUKFComponent,\n        }[linearization]\n    \n        linearized_dynmod = _lin_method(prior_process.transition)\n        linearized_measmod = _lin_method(regression_problem.measurement_models[0])\n        regression_problem.measurement_models = [linearized_measmod] * len(\n            regression_problem.locations\n        )\n    \n        prior_process = randprocs.markov.MarkovProcess(\n            transition=linearized_dynmod,\n            initrv=prior_process.initrv,\n            initarg=regression_problem.locations[0],\n        )\n        self.regression_problem = regression_problem\n    \n        self.kalman_filter = filtsmooth.gaussian.Kalman(prior_process=prior_process)", "name": "filtsmooth.Filtering.peakmem_filter", "param_names": ["linearization_implementation"], "params": [["('ekf', 'classic')", "('ekf', 'sqrt')", "('ukf', 'classic')"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "f86393f33a5e3bb65abe382abc43d9233b806945e94738e0539e6813078db37f"}, "filtsmooth.Filtering.time_filter": {"code": "class Filtering:\n    def time_filter(self, linearization_implementation):\n        self.kalman_filter.filter(self.regression_problem)\n\n    def setup(self, linearization_implementation):\n        measvar = 0.1024\n        initrv = randvars.Normal(np.ones(2), measvar * np.eye(2))\n        rng = np.random.default_rng(seed=1)\n        regression_problem, info = filtsmooth_zoo.pendulum(\n            rng=rng,\n            measurement_variance=measvar,\n            timespan=(0.0, 4.0),\n            step=0.0075,\n            initrv=initrv,\n        )\n        prior_process = info[\"prior_process\"]\n    \n        linearization, implementation = linearization_implementation\n        _lin_method = {\n            \"ekf\": functools.partial(\n                filtsmooth.gaussian.approx.DiscreteEKFComponent,\n                forward_implementation=implementation,\n                backward_implementation=implementation,\n            ),\n            \"ukf\": filtsmooth.gaussian.approx.DiscreteUKFComponent,\n        }[linearization]\n    \n        linearized_dynmod = _lin_method(prior_process.transition)\n        linearized_measmod = _lin_method(regression_problem.measurement_models[0])\n        regression_problem.measurement_models = [linearized_measmod] * len(\n            regression_problem.locations\n        )\n    \n        prior_process = randprocs.markov.MarkovProcess(\n            transition=linearized_dynmod,\n            initrv=prior_process.initrv,\n            initarg=regression_problem.locations[0],\n        )\n        self.regression_problem = regression_problem\n    \n        self.kalman_filter = filtsmooth.gaussian.Kalman(prior_process=prior_process)", "min_run_count": 2, "name": "filtsmooth.Filtering.time_filter", "number": 0, "param_names": ["linearization_implementation"], "params": [["('ekf', 'classic')", "('ekf', 'sqrt')", "('ukf', 'classic')"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "f14e6fc2893b0fe4037c8a7ed6fa090c3986966035331c0ad795bf26d20538fd", "warmup_time": -1}, "filtsmooth.Smoothing.peakmem_smooth": {"code": "class Smoothing:\n    def peakmem_smooth(self, linearization_implementation):\n        self.kalman_filter.smooth(filter_posterior=self.filtering_posterior)\n\n    def setup(self, linearization_implementation):\n        measvar = 0.1024\n        initrv = randvars.Normal(np.ones(2), measvar * np.eye(2))\n        rng = np.random.default_rng(seed=1)\n        regression_problem, info = filtsmooth_zoo.pendulum(\n            rng=rng,\n            measurement_variance=measvar,\n            timespan=(0.0, 4.0),\n            step=0.0075,\n            initrv=initrv,\n        )\n        prior_process = info[\"prior_process\"]\n    \n        linearization, implementation = linearization_implementation\n        _lin_method = {\n            \"ekf\": functools.partial(\n                filtsmooth.gaussian.approx.DiscreteEKFComponent,\n                forward_implementation=implementation,\n                backward_implementation=implementation,\n            ),\n            \"ukf\": filtsmooth.gaussian.approx.DiscreteUKFComponent,\n        }[linearization]\n    \n        linearized_dynmod = _lin_method(prior_process.transition)\n        linearized_measmod = _lin_method(regression_problem.measurement_models[0])\n        regression_problem.measurement_models = [linearized_measmod] * len(\n            regression_problem.locations\n        )\n    \n        prior_process = randprocs.markov.MarkovProcess(\n            transition=linearized_dynmod,\n            initrv=prior_process.initrv,\n            initarg=regression_problem.locations[0],\n        )\n    \n        self.kalman_filter = filtsmooth.gaussian.Kalman(prior_process=prior_process)\n        self.filtering_posterior, _ = self.kalman_filter.filter(regression_problem)", "name": "filtsmooth.Smoothing.peakmem_smooth", "param_names": ["linearization_implementation"], "params": [["('ekf', 'classic')", "('ekf', 'sqrt')", "('ukf', 'classic')"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "fe78fa9fda2f4949e71676826c8344780b279b0f3f44162c3a5bb67445890959"}, "filtsmooth.Smoothing.time_smooth": {"code": "class Smoothing:\n    def time_smooth(self, linearization_implementation):\n        self.kalman_filter.smooth(filter_posterior=self.filtering_posterior)\n\n    def setup(self, linearization_implementation):\n        measvar = 0.1024\n        initrv = randvars.Normal(np.ones(2), measvar * np.eye(2))\n        rng = np.random.default_rng(seed=1)\n        regression_problem, info = filtsmooth_zoo.pendulum(\n            rng=rng,\n            measurement_variance=measvar,\n            timespan=(0.0, 4.0),\n            step=0.0075,\n            initrv=initrv,\n        )\n        prior_process = info[\"prior_process\"]\n    \n        linearization, implementation = linearization_implementation\n        _lin_method = {\n            \"ekf\": functools.partial(\n                filtsmooth.gaussian.approx.DiscreteEKFComponent,\n                forward_implementation=implementation,\n                backward_implementation=implementation,\n            ),\n            \"ukf\": filtsmooth.gaussian.approx.DiscreteUKFComponent,\n        }[linearization]\n    \n        linearized_dynmod = _lin_method(prior_process.transition)\n        linearized_measmod = _lin_method(regression_problem.measurement_models[0])\n        regression_problem.measurement_models = [linearized_measmod] * len(\n            regression_problem.locations\n        )\n    \n        prior_process = randprocs.markov.MarkovProcess(\n            transition=linearized_dynmod,\n            initrv=prior_process.initrv,\n            initarg=regression_problem.locations[0],\n        )\n    \n        self.kalman_filter = filtsmooth.gaussian.Kalman(prior_process=prior_process)\n        self.filtering_posterior, _ = self.kalman_filter.filter(regression_problem)", "min_run_count": 2, "name": "filtsmooth.Smoothing.time_smooth", "number": 0, "param_names": ["linearization_implementation"], "params": [["('ekf', 'classic')", "('ekf', 'sqrt')", "('ukf', 'classic')"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "f9ff2b4ce736cd8f88385c8e741dd5945de558f0b643940bfff0642324d5f92c", "warmup_time": -1}, "ivpsolvers.IVPSolve.peakmem_solve": {"code": "class IVPSolve:\n    def peakmem_solve(self, method, algo_order):\n        probsolve_ivp(\n            f=self.ivp.f,\n            t0=self.ivp.t0,\n            tmax=self.ivp.tmax,\n            y0=self.ivp.y0,\n            df=self.ivp.df,\n            method=method,\n            dense_output=True,\n            algo_order=algo_order,\n            step=self.stepsize,\n            adaptive=False,\n        )\n\n    def setup(self, method, prior):\n        # pylint: disable=invalid-name\n        self.ivp = load_lotkavolterra()\n        self.stepsize = 1e-1", "name": "ivpsolvers.IVPSolve.peakmem_solve", "param_names": ["method", "algo_order"], "params": [["'ek0'", "'ek1'"], ["2", "3"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "21081f5f8c9e7649ac7918e029fe7c37750c1bf26033fc019bc8690436ad19eb"}, "ivpsolvers.IVPSolve.time_solve": {"code": "class IVPSolve:\n    def time_solve(self, method, algo_order):\n        probsolve_ivp(\n            f=self.ivp.f,\n            t0=self.ivp.t0,\n            tmax=self.ivp.tmax,\n            y0=self.ivp.y0,\n            df=self.ivp.df,\n            method=method,\n            dense_output=True,\n            algo_order=algo_order,\n            step=self.stepsize,\n            adaptive=False,\n        )\n\n    def setup(self, method, prior):\n        # pylint: disable=invalid-name\n        self.ivp = load_lotkavolterra()\n        self.stepsize = 1e-1", "min_run_count": 2, "name": "ivpsolvers.IVPSolve.time_solve", "number": 0, "param_names": ["method", "algo_order"], "params": [["'ek0'", "'ek1'"], ["2", "3"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a227381cd9f6b606534b487836869be4c236542c5a70590d392d343ded59d977", "warmup_time": -1}, "kernels.Kernels.peakmem_kernel_matrix": {"code": "class Kernels:\n    def peakmem_kernel_matrix(self, kernel, n_datapoints):\n        \"\"\"Peak memory of sampling process.\"\"\"\n        self.kernel(self.data)\n\n    def setup(self, kernel, n_datapoints):\n        rng = np.random.default_rng(42)\n        self.input_dim = 100\n        self.data = rng.normal(size=(n_datapoints, self.input_dim))\n        self.kernel = get_kernel(kernel_name=kernel, input_dim=self.input_dim)", "name": "kernels.Kernels.peakmem_kernel_matrix", "param_names": ["kernel", "n_datapoints"], "params": [["'white_noise'", "'linear'", "'polynomial'", "'exp_quad'", "'rat_quad'", "'matern12'", "'matern32'", "'matern52'", "'matern72'"], ["10", "100", "1000"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "b4f420e1ef1214a865c6f026feb39a43143f57a26b361623fb63418e2f0a01b1"}, "kernels.Kernels.time_kernel_matrix": {"code": "class Kernels:\n    def time_kernel_matrix(self, kernel, n_datapoints):\n        \"\"\"Times sampling from this distribution.\"\"\"\n        self.kernel(self.data)\n\n    def setup(self, kernel, n_datapoints):\n        rng = np.random.default_rng(42)\n        self.input_dim = 100\n        self.data = rng.normal(size=(n_datapoints, self.input_dim))\n        self.kernel = get_kernel(kernel_name=kernel, input_dim=self.input_dim)", "min_run_count": 2, "name": "kernels.Kernels.time_kernel_matrix", "number": 0, "param_names": ["kernel", "n_datapoints"], "params": [["'white_noise'", "'linear'", "'polynomial'", "'exp_quad'", "'rat_quad'", "'matern12'", "'matern32'", "'matern52'", "'matern72'"], ["10", "100", "1000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "bd80bb62c96bc059c77c591c8a2f9c501cce5fe29dd92efb750ce55f0ada226e", "warmup_time": -1}, "linearsolvers.LinSolve.peakmem_solve": {"code": "class LinSolve:\n    def peakmem_solve(self, linsys, dim):\n        problinsolve(A=self.linsys.A, b=self.linsys.b)\n\n    def setup(self, linsys, dim):\n        self.linsys = get_linear_system(name=linsys, dim=dim)\n        xhat, _, _, _ = problinsolve(A=self.linsys.A, b=self.linsys.b)\n        self.xhat = xhat", "name": "linearsolvers.LinSolve.peakmem_solve", "param_names": ["linsys", "dim"], "params": [["'dense'", "'sparse'", "'linop'"], ["100", "1000", "10000", "100000"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "319e4cd5c37e9c2c9c99d62d7ce07de29eccf4bc310801d1b6efac1d45c81d0e"}, "linearsolvers.LinSolve.time_solve": {"code": "class LinSolve:\n    def time_solve(self, linsys, dim):\n        problinsolve(A=self.linsys.A, b=self.linsys.b)\n\n    def setup(self, linsys, dim):\n        self.linsys = get_linear_system(name=linsys, dim=dim)\n        xhat, _, _, _ = problinsolve(A=self.linsys.A, b=self.linsys.b)\n        self.xhat = xhat", "min_run_count": 2, "name": "linearsolvers.LinSolve.time_solve", "number": 0, "param_names": ["linsys", "dim"], "params": [["'dense'", "'sparse'", "'linop'"], ["100", "1000", "10000", "100000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "5d87248d348027d440cc249ddc3fc11d54b0ff028f4bca3dc6f17ba6533a7f84", "warmup_time": -1}, "linearsolvers.LinSolve.track_error_2norm": {"code": "class LinSolve:\n    def track_error_2norm(self, linsys, dim):\n        return np.linalg.norm(self.linsys.solution - self.xhat.mean)\n\n    def setup(self, linsys, dim):\n        self.linsys = get_linear_system(name=linsys, dim=dim)\n        xhat, _, _, _ = problinsolve(A=self.linsys.A, b=self.linsys.b)\n        self.xhat = xhat", "name": "linearsolvers.LinSolve.track_error_2norm", "param_names": ["linsys", "dim"], "params": [["'dense'", "'sparse'", "'linop'"], ["100", "1000", "10000", "100000"]], "timeout": 60.0, "type": "track", "unit": "unit", "version": "62950c1f4841d07999bebd7c23e33a98f0059a7a7dec13308215c168bc6cb7d5"}, "linearsolvers.LinSolve.track_error_Anorm": {"code": "class LinSolve:\n    def track_error_Anorm(self, linsys, dim):\n        diff = self.linsys.solution - self.xhat.mean\n        return np.sqrt(np.inner(diff, self.linsys.A @ diff))\n\n    def setup(self, linsys, dim):\n        self.linsys = get_linear_system(name=linsys, dim=dim)\n        xhat, _, _, _ = problinsolve(A=self.linsys.A, b=self.linsys.b)\n        self.xhat = xhat", "name": "linearsolvers.LinSolve.track_error_Anorm", "param_names": ["linsys", "dim"], "params": [["'dense'", "'sparse'", "'linop'"], ["100", "1000", "10000", "100000"]], "timeout": 60.0, "type": "track", "unit": "unit", "version": "5f36841f0f7a7c6b0f61024b458950fccc82e2de80f1ee449550409b1be54335"}, "linearsolvers.LinSolve.track_residual_norm": {"code": "class LinSolve:\n    def track_residual_norm(self, linsys, dim):\n        return np.linalg.norm(self.linsys.A @ self.xhat.mean - self.linsys.b)\n\n    def setup(self, linsys, dim):\n        self.linsys = get_linear_system(name=linsys, dim=dim)\n        xhat, _, _, _ = problinsolve(A=self.linsys.A, b=self.linsys.b)\n        self.xhat = xhat", "name": "linearsolvers.LinSolve.track_residual_norm", "param_names": ["linsys", "dim"], "params": [["'dense'", "'sparse'", "'linop'"], ["100", "1000", "10000", "100000"]], "timeout": 60.0, "type": "track", "unit": "unit", "version": "518f263f8ed43bd7f935e933bc4b2ac101616e2d303f9a44c3129374070dcc48"}, "linearsolvers.PosteriorBelief.peakmem_trace_cov": {"code": "class PosteriorBelief:\n    def peakmem_trace_cov(self, linsys, dim, qoi):\n        self.qoi.cov.trace()\n\n    def setup(self, linsys, dim, qoi):\n    \n        if dim > 1000:\n            # Operations on the posterior for large matrices can be very memory intensive.\n            raise NotImplementedError()\n    \n        self.linsys = get_linear_system(name=linsys, dim=dim)\n        x, A, Ainv, _ = problinsolve(A=self.linsys.A, b=self.linsys.b)\n        self.qoi = get_quantity_of_interest(qoi, x, A, Ainv)", "name": "linearsolvers.PosteriorBelief.peakmem_trace_cov", "param_names": ["linsys", "dim", "qoi"], "params": [["'dense'", "'sparse'", "'linop'"], ["100", "1000", "10000", "100000"], ["'x'", "'A'", "'Ainv'"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "e25b9c45f357edb297758e211da0c31cb63da0523370679774072fd3d6a6d387"}, "linearsolvers.PosteriorBelief.time_trace_cov": {"code": "class PosteriorBelief:\n    def time_trace_cov(self, linsys, dim, qoi):\n        self.qoi.cov.trace()\n\n    def setup(self, linsys, dim, qoi):\n    \n        if dim > 1000:\n            # Operations on the posterior for large matrices can be very memory intensive.\n            raise NotImplementedError()\n    \n        self.linsys = get_linear_system(name=linsys, dim=dim)\n        x, A, Ainv, _ = problinsolve(A=self.linsys.A, b=self.linsys.b)\n        self.qoi = get_quantity_of_interest(qoi, x, A, Ainv)", "min_run_count": 2, "name": "linearsolvers.PosteriorBelief.time_trace_cov", "number": 0, "param_names": ["linsys", "dim", "qoi"], "params": [["'dense'", "'sparse'", "'linop'"], ["100", "1000", "10000", "100000"], ["'x'", "'A'", "'Ainv'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "2462d533c7254a2600be1fb1ffce2b74104920b18a493224f71db7c05bf7ae92", "warmup_time": -1}, "linops.Cond.peakmem_cond": {"code": "class Cond:\n    def peakmem_cond(self, operator: str, p):\n        self.linop.cond(p=p)\n\n    def setup(self, operator: str, p):\n        np.random.seed(42)\n    \n        if operator in NO_COND[p]:\n            raise NotImplementedError()\n    \n        self.linop = get_linear_operator(operator)", "name": "linops.Cond.peakmem_cond", "param_names": ["operator", "p"], "params": [["'matrix'", "'matrix_sparse'", "'identity'", "'isotropic_scaling'", "'anisotropic_scaling'", "'kronecker'", "'symmetric_kronecker_distinct_factors'", "'symmetric_kronecker_identical_factors'"], ["2", "'fro'", "1", "inf"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "de1c7de85ed1e087b13267ea364dcb4cd32dba38932bed7f4a2c0882a7eb2eee"}, "linops.Cond.time_cond": {"code": "class Cond:\n    def time_cond(self, operator: str, p):\n        self.linop.cond(p=p)\n\n    def setup(self, operator: str, p):\n        np.random.seed(42)\n    \n        if operator in NO_COND[p]:\n            raise NotImplementedError()\n    \n        self.linop = get_linear_operator(operator)", "min_run_count": 2, "name": "linops.Cond.time_cond", "number": 0, "param_names": ["operator", "p"], "params": [["'matrix'", "'matrix_sparse'", "'identity'", "'isotropic_scaling'", "'anisotropic_scaling'", "'kronecker'", "'symmetric_kronecker_distinct_factors'", "'symmetric_kronecker_identical_factors'"], ["2", "'fro'", "1", "inf"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "631616ea7ae3a99fc7663f184c65dcaa0cc9d7c676124dd895aef0e527f62dce", "warmup_time": -1}, "linops.Construction.peakmem_matvec": {"code": "class Construction:\n    def peakmem_matvec(self, operator: str):\n        get_linear_operator(operator)\n\n    def setup(self, operator: str):\n        np.random.seed(42)", "name": "linops.Construction.peakmem_matvec", "param_names": ["operator"], "params": [["'matrix'", "'matrix_sparse'", "'identity'", "'isotropic_scaling'", "'anisotropic_scaling'", "'kronecker'", "'symmetric_kronecker_distinct_factors'", "'symmetric_kronecker_identical_factors'"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "ae87a369dcccf6af4c938b268cd8228960e7357b16e4f2fbd91d85b5203d8e7c"}, "linops.Construction.time_construction": {"code": "class Construction:\n    def time_construction(self, operator: str):\n        get_linear_operator(operator)\n\n    def setup(self, operator: str):\n        np.random.seed(42)", "min_run_count": 2, "name": "linops.Construction.time_construction", "number": 0, "param_names": ["operator"], "params": [["'matrix'", "'matrix_sparse'", "'identity'", "'isotropic_scaling'", "'anisotropic_scaling'", "'kronecker'", "'symmetric_kronecker_distinct_factors'", "'symmetric_kronecker_identical_factors'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a30599dfc07b2fc54d7dd57b61f6f291d5be098be4561d33c6a4cfe87f727eee", "warmup_time": -1}, "linops.Det.peakmem_det": {"code": "class Det:\n    def peakmem_det(self, operator: str):\n        self.linop.det()\n\n    def setup(self, operator: str):\n        np.random.seed(42)\n    \n        if operator in NO_DET:\n            raise NotImplementedError()\n    \n        self.linop = get_linear_operator(operator)", "name": "linops.Det.peakmem_det", "param_names": ["operator"], "params": [["'matrix'", "'matrix_sparse'", "'identity'", "'isotropic_scaling'", "'anisotropic_scaling'", "'kronecker'", "'symmetric_kronecker_distinct_factors'", "'symmetric_kronecker_identical_factors'"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "0f7b7734cc4aae667f7420eb65bec0e2a8d93ace2b3ea9fcb0843c36db15df16"}, "linops.Det.time_det": {"code": "class Det:\n    def time_det(self, operator: str):\n        self.linop.det()\n\n    def setup(self, operator: str):\n        np.random.seed(42)\n    \n        if operator in NO_DET:\n            raise NotImplementedError()\n    \n        self.linop = get_linear_operator(operator)", "min_run_count": 2, "name": "linops.Det.time_det", "number": 0, "param_names": ["operator"], "params": [["'matrix'", "'matrix_sparse'", "'identity'", "'isotropic_scaling'", "'anisotropic_scaling'", "'kronecker'", "'symmetric_kronecker_distinct_factors'", "'symmetric_kronecker_identical_factors'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "0c2242d4f54ee8a7e2a11f686e600bfaeeb88693a5f6bc7411c207cbb3790bc1", "warmup_time": -1}, "linops.Eigvals.peakmem_eigvals": {"code": "class Eigvals:\n    def peakmem_eigvals(self, operator: str):\n        self.linop.eigvals()\n\n    def setup(self, operator: str):\n        np.random.seed(42)\n    \n        if operator in NO_EIGVALS:\n            raise NotImplementedError()\n    \n        self.linop = get_linear_operator(operator)", "name": "linops.Eigvals.peakmem_eigvals", "param_names": ["operator"], "params": [["'matrix'", "'matrix_sparse'", "'identity'", "'isotropic_scaling'", "'anisotropic_scaling'", "'kronecker'", "'symmetric_kronecker_distinct_factors'", "'symmetric_kronecker_identical_factors'"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "5e2311b3426897501464fb49abb571222d9019bb1365d1fa2fa43e067c966c82"}, "linops.Eigvals.time_eigvals": {"code": "class Eigvals:\n    def time_eigvals(self, operator: str):\n        self.linop.eigvals()\n\n    def setup(self, operator: str):\n        np.random.seed(42)\n    \n        if operator in NO_EIGVALS:\n            raise NotImplementedError()\n    \n        self.linop = get_linear_operator(operator)", "min_run_count": 2, "name": "linops.Eigvals.time_eigvals", "number": 0, "param_names": ["operator"], "params": [["'matrix'", "'matrix_sparse'", "'identity'", "'isotropic_scaling'", "'anisotropic_scaling'", "'kronecker'", "'symmetric_kronecker_distinct_factors'", "'symmetric_kronecker_identical_factors'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "2a12534450fb9e4be1b0423e92b87d90d118d53107b12c60535b8819583479b2", "warmup_time": -1}, "linops.LogAbsDet.peakmem_logabsdet": {"code": "class LogAbsDet:\n    def peakmem_logabsdet(self, operator: str):\n        self.linop.logabsdet()\n\n    def setup(self, operator: str):\n        np.random.seed(42)\n    \n        if operator in NO_LOGABSDET:\n            raise NotImplementedError()\n    \n        self.linop = get_linear_operator(operator)", "name": "linops.LogAbsDet.peakmem_logabsdet", "param_names": ["operator"], "params": [["'matrix'", "'matrix_sparse'", "'identity'", "'isotropic_scaling'", "'anisotropic_scaling'", "'kronecker'", "'symmetric_kronecker_distinct_factors'", "'symmetric_kronecker_identical_factors'"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "ff6088730132a29b2e64db868896fed674ecf65fa182e5c6058ac28033d7b895"}, "linops.LogAbsDet.time_logabsdet": {"code": "class LogAbsDet:\n    def time_logabsdet(self, operator: str):\n        self.linop.logabsdet()\n\n    def setup(self, operator: str):\n        np.random.seed(42)\n    \n        if operator in NO_LOGABSDET:\n            raise NotImplementedError()\n    \n        self.linop = get_linear_operator(operator)", "min_run_count": 2, "name": "linops.LogAbsDet.time_logabsdet", "number": 0, "param_names": ["operator"], "params": [["'matrix'", "'matrix_sparse'", "'identity'", "'isotropic_scaling'", "'anisotropic_scaling'", "'kronecker'", "'symmetric_kronecker_distinct_factors'", "'symmetric_kronecker_identical_factors'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "673ebc1bf2101999d0cfcddf5a345f5e1e566000367d6186ea2117dfe35143a7", "warmup_time": -1}, "linops.MatMat.peakmem_matmat": {"code": "class MatMat:\n    def peakmem_matmat(self, operator: str):\n        _ = self.linop @ self.mat\n\n    def setup(self, operator: str):\n        np.random.seed(42)\n    \n        self.linop = get_linear_operator(operator)\n        self.mat = np.ones(\n            (self.linop.shape[1], 1000), dtype=self.linop.dtype, order=\"F\"\n        )", "name": "linops.MatMat.peakmem_matmat", "param_names": ["operator"], "params": [["'matrix'", "'matrix_sparse'", "'identity'", "'isotropic_scaling'", "'anisotropic_scaling'", "'kronecker'", "'symmetric_kronecker_distinct_factors'", "'symmetric_kronecker_identical_factors'"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "a67815b3c335e81aaf6e577d2c5f75f8f43de98717463b518c6cdfe0ccf72ef6"}, "linops.MatMat.time_matmat": {"code": "class MatMat:\n    def time_matmat(self, operator: str):\n        _ = self.linop @ self.mat\n\n    def setup(self, operator: str):\n        np.random.seed(42)\n    \n        self.linop = get_linear_operator(operator)\n        self.mat = np.ones(\n            (self.linop.shape[1], 1000), dtype=self.linop.dtype, order=\"F\"\n        )", "min_run_count": 2, "name": "linops.MatMat.time_matmat", "number": 0, "param_names": ["operator"], "params": [["'matrix'", "'matrix_sparse'", "'identity'", "'isotropic_scaling'", "'anisotropic_scaling'", "'kronecker'", "'symmetric_kronecker_distinct_factors'", "'symmetric_kronecker_identical_factors'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "56c6cafbf6cef4adf5006c7a1a0521b50bae2061dd48d6b6c3282747c7bcb0f0", "warmup_time": -1}, "linops.MatVec.peakmem_matvec": {"code": "class MatVec:\n    def peakmem_matvec(self, operator: str):\n        _ = self.linop @ self.vec\n\n    def setup(self, operator: str):\n        np.random.seed(42)\n    \n        self.linop = get_linear_operator(operator)\n        self.vec = np.ones(self.linop.shape[1], dtype=self.linop.dtype)", "name": "linops.MatVec.peakmem_matvec", "param_names": ["operator"], "params": [["'matrix'", "'matrix_sparse'", "'identity'", "'isotropic_scaling'", "'anisotropic_scaling'", "'kronecker'", "'symmetric_kronecker_distinct_factors'", "'symmetric_kronecker_identical_factors'"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "870528f5173e3432055cbaf18a1613f907a2ff2557a5fbdce0b48fa69f0c0065"}, "linops.MatVec.time_matvec": {"code": "class MatVec:\n    def time_matvec(self, operator: str):\n        _ = self.linop @ self.vec\n\n    def setup(self, operator: str):\n        np.random.seed(42)\n    \n        self.linop = get_linear_operator(operator)\n        self.vec = np.ones(self.linop.shape[1], dtype=self.linop.dtype)", "min_run_count": 2, "name": "linops.MatVec.time_matvec", "number": 0, "param_names": ["operator"], "params": [["'matrix'", "'matrix_sparse'", "'identity'", "'isotropic_scaling'", "'anisotropic_scaling'", "'kronecker'", "'symmetric_kronecker_distinct_factors'", "'symmetric_kronecker_identical_factors'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "cd9c1dd865449e5810e461b20ca04b8d8bc53c21ca294bda571d2645afece784", "warmup_time": -1}, "linops.Rank.peakmem_rank": {"code": "class Rank:\n    def peakmem_rank(self, operator: str):\n        self.linop.rank()\n\n    def setup(self, operator: str):\n        np.random.seed(42)\n    \n        if operator in NO_RANK:\n            raise NotImplementedError()\n    \n        self.linop = get_linear_operator(operator)", "name": "linops.Rank.peakmem_rank", "param_names": ["operator"], "params": [["'matrix'", "'matrix_sparse'", "'identity'", "'isotropic_scaling'", "'anisotropic_scaling'", "'kronecker'", "'symmetric_kronecker_distinct_factors'", "'symmetric_kronecker_identical_factors'"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "a936825e1c63c8e988eddadac78ef6b3fe26a92aacf25a17915ee1bcf0cf7758"}, "linops.Rank.time_rank": {"code": "class Rank:\n    def time_rank(self, operator: str):\n        self.linop.rank()\n\n    def setup(self, operator: str):\n        np.random.seed(42)\n    \n        if operator in NO_RANK:\n            raise NotImplementedError()\n    \n        self.linop = get_linear_operator(operator)", "min_run_count": 2, "name": "linops.Rank.time_rank", "number": 0, "param_names": ["operator"], "params": [["'matrix'", "'matrix_sparse'", "'identity'", "'isotropic_scaling'", "'anisotropic_scaling'", "'kronecker'", "'symmetric_kronecker_distinct_factors'", "'symmetric_kronecker_identical_factors'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "c2e4bd0b1fffac9da7371c0a548285b8966878da14c48b3549fd4a674f4d15b0", "warmup_time": -1}, "linops.Trace.peakmem_trace": {"code": "class Trace:\n    def peakmem_trace(self, operator: str):\n        self.linop.trace()\n\n    def setup(self, operator: str):\n        np.random.seed(42)\n    \n        if operator in NO_TRACE:\n            raise NotImplementedError()\n    \n        self.linop = get_linear_operator(operator)", "name": "linops.Trace.peakmem_trace", "param_names": ["operator"], "params": [["'matrix'", "'matrix_sparse'", "'identity'", "'isotropic_scaling'", "'anisotropic_scaling'", "'kronecker'", "'symmetric_kronecker_distinct_factors'", "'symmetric_kronecker_identical_factors'"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "396ce90079c28a6a9c124c215a13a4cfe6b980dc09f35fc4ff4079af1353c5fd"}, "linops.Trace.time_trace": {"code": "class Trace:\n    def time_trace(self, operator: str):\n        self.linop.trace()\n\n    def setup(self, operator: str):\n        np.random.seed(42)\n    \n        if operator in NO_TRACE:\n            raise NotImplementedError()\n    \n        self.linop = get_linear_operator(operator)", "min_run_count": 2, "name": "linops.Trace.time_trace", "number": 0, "param_names": ["operator"], "params": [["'matrix'", "'matrix_sparse'", "'identity'", "'isotropic_scaling'", "'anisotropic_scaling'", "'kronecker'", "'symmetric_kronecker_distinct_factors'", "'symmetric_kronecker_identical_factors'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ccb41a2f40430f0a7ab8e86147d9d890a75858e4828034dea3863de3714e8a50", "warmup_time": -1}, "random_variables.Functions.time_distr_functions": {"code": "class Functions:\n    def time_distr_functions(self, randvar, method):\n        \"\"\"Times evaluation of the pdf, logpdf, cdf and logcdf.\"\"\"\n        try:\n            if method == \"pdf\":\n                self.randvar.pdf(x=self.eval_point)\n            elif method == \"logpdf\":\n                self.randvar.logpdf(x=self.eval_point)\n            elif method == \"cdf\":\n                self.randvar.cdf(x=self.quantile)\n            elif method == \"logcdf\":\n                self.randvar.logcdf(x=self.quantile)\n        except NotImplementedError:\n            pass\n\n    def setup(self, randvar, method):\n        self.randvar = get_randvar(rv_name=randvar)\n        self.eval_point = np.random.uniform(size=self.randvar.shape)\n        self.quantile = np.random.uniform(size=self.randvar.shape)", "min_run_count": 2, "name": "random_variables.Functions.time_distr_functions", "number": 0, "param_names": ["randvar", "method"], "params": [["'univar_normal'", "'multivar_normal'", "'matrixvar_normal'", "'symmatrixvar_normal'", "'operatorvar_normal'"], ["'pdf'", "'logpdf'", "'cdf'", "'logcdf'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "7e411912776b427b31a26b16d9bb33e49fba6bef3e1d49b79641f7b2138e2ff9", "warmup_time": -1}, "random_variables.Sampling.peakmem_sample": {"code": "class Sampling:\n    def peakmem_sample(self, randvar):\n        \"\"\"Peak memory of sampling process.\"\"\"\n        self.randvar.sample(rng=self.rng, size=self.n_samples)\n\n    def setup(self, randvar):\n        self.rng = np.random.default_rng(seed=2)\n        self.n_samples = 1000\n        self.randvar = get_randvar(rv_name=randvar)", "name": "random_variables.Sampling.peakmem_sample", "param_names": ["randvar"], "params": [["'univar_normal'", "'multivar_normal'", "'matrixvar_normal'", "'symmatrixvar_normal'", "'operatorvar_normal'"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "72376cccbe83a44cfd4b5e88d92a9aee5272707272d5973dd08d5c285aba36b8"}, "random_variables.Sampling.time_sample": {"code": "class Sampling:\n    def time_sample(self, randvar):\n        \"\"\"Times sampling from this distribution.\"\"\"\n        self.randvar.sample(rng=self.rng, size=self.n_samples)\n\n    def setup(self, randvar):\n        self.rng = np.random.default_rng(seed=2)\n        self.n_samples = 1000\n        self.randvar = get_randvar(rv_name=randvar)", "min_run_count": 2, "name": "random_variables.Sampling.time_sample", "number": 0, "param_names": ["randvar"], "params": [["'univar_normal'", "'multivar_normal'", "'matrixvar_normal'", "'symmatrixvar_normal'", "'operatorvar_normal'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "0e88b17462e8804ae5a3f1212d88ccb36de4d62d11e9e5bdf6137c30e7a8a127", "warmup_time": -1}, "randprocs.MarkovProcessSampling.time_sample": {"code": "class MarkovProcessSampling:\n    def time_sample(self, lazy_linalg, len_trajectory, num_derivatives, dimension):\n        with config(lazy_linalg=lazy_linalg):\n            self.markov_process.transition.jointly_transform_base_measure_realization_list_forward(\n                base_measure_realizations=self.base_measure_realization,\n                t=self.time_grid,\n                initrv=self.markov_process.initrv,\n                _diffusion_list=np.ones_like(self.time_grid[:-1]),\n            )\n\n    def setup(self, lazy_linalg, len_trajectory, num_derivatives, dimension):\n        with config(lazy_linalg=lazy_linalg):\n    \n            dynamics = randprocs.markov.integrator.IntegratedWienerTransition(\n                num_derivatives=num_derivatives,\n                wiener_process_dimension=dimension,\n                forward_implementation=\"classic\",\n                backward_implementation=\"classic\",\n            )\n    \n            measvar = 0.1024\n            initrv = randvars.Normal(\n                np.ones(dynamics.state_dimension),\n                measvar * linops.Identity(dynamics.state_dimension),\n            )\n    \n            time_domain = (0.0, float(len_trajectory))\n            self.time_grid = np.arange(*time_domain)\n            self.markov_process = randprocs.markov.MarkovProcess(\n                initarg=time_domain[0], initrv=initrv, transition=dynamics\n            )\n    \n            rng = np.random.default_rng(seed=1)\n            self.base_measure_realization = scipy.stats.norm.rvs(\n                size=(self.time_grid.shape + initrv.shape),\n                random_state=rng,\n            )", "min_run_count": 2, "name": "randprocs.MarkovProcessSampling.time_sample", "number": 0, "param_names": ["lazy_linalg", "len_trajectory", "num_derivatives", "dimension"], "params": [["True", "False"], ["10"], ["5"], ["50", "100"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d1aeaee748493c4f32a4840f5e0d29583124e22358505eea3c3b73781d0ac2ba", "warmup_time": -1}}, "machines": {"unitue-mlcloud-probnum": {"machine": "unitue-mlcloud-probnum", "version": 1}}, "tags": {"v.0.0.1-alpha": 326, "v0.0.1-beta": 525, "v0.1.0": 802, "v0.1.1": 808, "v0.1.10": 1031, "v0.1.11": 1040, "v0.1.2": 873, "v0.1.3": 896, "v0.1.4": 929, "v0.1.5": 933, "v0.1.6": 947, "v0.1.7": 962, "v0.1.8": 985, "v0.1.9": 1011}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}